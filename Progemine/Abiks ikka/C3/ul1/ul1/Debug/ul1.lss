
ul1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000928  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003d5  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000107  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ac  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  6c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  70:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  7c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  80:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  84:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  8c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  90:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  94:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  98:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  ac:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  bc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  cc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  dc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  e0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 e6       	ldi	r30, 0x60	; 96
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>
 10a:	1b be       	out	0x3b, r1	; 59

0000010c <__do_clear_bss>:
 10c:	12 e0       	ldi	r17, 0x02	; 2
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b2 e0       	ldi	r27, 0x02	; 2
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a0 30       	cpi	r26, 0x00	; 0
 118:	b1 07       	cpc	r27, r17
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 94 00 	call	0x128	; 0x128 <main>
 120:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <main>:
#include <avr/io.h>

uint8_t strcopy(char *dest, char *src, int destSize);

int main(void)
{
 128:	ff cf       	rjmp	.-2      	; 0x128 <main>

0000012a <strcopy>:
uint8_t strcopy(char *dest, char *src, int destSize){
	char* destPtr = dest;
	char* srcPtr = src;
	int i = 0;
	
	while(*srcPtr != 0){
 12a:	fb 01       	movw	r30, r22
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	79 f0       	breq	.+30     	; 0x150 <strcopy+0x26>
		if(i >= destSize){
 132:	14 16       	cp	r1, r20
 134:	15 06       	cpc	r1, r21
 136:	74 f4       	brge	.+28     	; 0x154 <strcopy+0x2a>
    }
}



uint8_t strcopy(char *dest, char *src, int destSize){
 138:	31 96       	adiw	r30, 0x01	; 1
 13a:	4e 0f       	add	r20, r30
 13c:	5f 1f       	adc	r21, r31
 13e:	03 c0       	rjmp	.+6      	; 0x146 <strcopy+0x1c>
	char* destPtr = dest;
	char* srcPtr = src;
	int i = 0;
	
	while(*srcPtr != 0){
		if(i >= destSize){
 140:	e4 17       	cp	r30, r20
 142:	f5 07       	cpc	r31, r21
 144:	49 f0       	breq	.+18     	; 0x158 <strcopy+0x2e>
uint8_t strcopy(char *dest, char *src, int destSize){
	char* destPtr = dest;
	char* srcPtr = src;
	int i = 0;
	
	while(*srcPtr != 0){
 146:	81 91       	ld	r24, Z+
 148:	88 23       	and	r24, r24
 14a:	d1 f7       	brne	.-12     	; 0x140 <strcopy+0x16>
		
		destPtr++;
		srcPtr++;
		i++;
	}
	return 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	08 95       	ret
	char* srcPtr = src;
	int i = 0;
	
	while(*srcPtr != 0){
		if(i >= destSize){
			return 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
		destPtr++;
		srcPtr++;
		i++;
	}
	return 1;
}
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
