
C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000362  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c0  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000087  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  6c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  70:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  7c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  80:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  84:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  8c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  90:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  94:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  98:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  ac:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  bc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  c8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  cc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  d8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  dc:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  e0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e6 e4       	ldi	r30, 0x46	; 70
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>
 10a:	1b be       	out	0x3b, r1	; 59

0000010c <__do_clear_bss>:
 10c:	12 e0       	ldi	r17, 0x02	; 2
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b2 e0       	ldi	r27, 0x02	; 2
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a0 30       	cpi	r26, 0x00	; 0
 118:	b1 07       	cpc	r27, r17
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 94 00 	call	0x128	; 0x128 <main>
 120:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <main>:

int main(void)
{
	int led = 0x01;

	DDRA = led;			//data direction
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	81 b9       	out	0x01, r24	; 1
	PORTA = led;		//light one LED
 12c:	82 b9       	out	0x02, r24	; 2


#include <avr/io.h>

int main(void)
{
 12e:	20 e2       	ldi	r18, 0x20	; 32
 130:	3e e4       	ldi	r19, 0x4E	; 78
 132:	c9 01       	movw	r24, r18
	
    while(1)
    {
		int mult = 0;
		for(int i = 0; i < 20000; i++){
			asm("NOP");
 134:	00 00       	nop
 136:	01 97       	sbiw	r24, 0x01	; 1
	int empty = 0xFF;
	
    while(1)
    {
		int mult = 0;
		for(int i = 0; i < 20000; i++){
 138:	e9 f7       	brne	.-6      	; 0x134 <main+0xc>
		//if(PORTA == led){
			//PORTA = 0x00;
		//}else{
			//PORTA = led;
		//}
		PORTA = PORTA^empty;
 13a:	82 b1       	in	r24, 0x02	; 2
 13c:	80 95       	com	r24
 13e:	82 b9       	out	0x02, r24	; 2
		
    }
 140:	f8 cf       	rjmp	.-16     	; 0x132 <main+0xa>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
