
ul4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000009c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048d  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000115  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000334  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c4  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_17>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_25>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 ef       	ldi	r30, 0xF8	; 248
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  ce:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:

int main(void)
{
	//UART
	//setting baud rate to 9600
	UBRR1 = 25;
  d6:	89 e1       	ldi	r24, 0x19	; 25
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 cd 00 	sts	0x00CD, r25
  de:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = (1 << U2X1);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 c8 00 	sts	0x00C8, r24
	//setting up 8 data bits
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
  e8:	96 e0       	ldi	r25, 0x06	; 6
  ea:	90 93 ca 00 	sts	0x00CA, r25
	//enabling transmitter, receiver, receive complete interrupt
	UCSR1B = (1 << TXEN1 | 1 << RXEN1 | 1 << RXCIE1);
  ee:	98 e9       	ldi	r25, 0x98	; 152
  f0:	90 93 c9 00 	sts	0x00C9, r25
	
	//TIMER-COUNTER
	//setting clock to 1/1024 CPU clock, setting timer to compare match mode
	TCCR1B = (1<<CS10) | (1<<CS12)| (1 << WGM12);
  f4:	9d e0       	ldi	r25, 0x0D	; 13
  f6:	90 93 81 00 	sts	0x0081, r25
	//initializing timer values
	TCCR1A = 0;
  fa:	10 92 80 00 	sts	0x0080, r1
	TCCR1C = 0;
  fe:	10 92 82 00 	sts	0x0082, r1
	//timer 1 compare match A interrupt enable
	TIMSK1 = (1 << OCIE1A);
 102:	80 93 6f 00 	sts	0x006F, r24
	//load number into compare match, 0.5 Hz
	OCR1A = 1953;
 106:	81 ea       	ldi	r24, 0xA1	; 161
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	90 93 89 00 	sts	0x0089, r25
 10e:	80 93 88 00 	sts	0x0088, r24
	
	//LED INITIALISATION
	//setting PORTA pin 0 to output
	DDRA = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	81 b9       	out	0x01, r24	; 1
	//lighting LED 0
	PORTA = 0x01;
 116:	82 b9       	out	0x02, r24	; 2

	//INTERRUPTS
	//global interrupt enable
	sei();
 118:	78 94       	sei
	
    while(1)
    {
        asm("nop");
 11a:	00 00       	nop
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x44>

0000011e <write_values>:
}



void write_values(unsigned int compA){
	OCR1A = compA;
 11e:	90 93 89 00 	sts	0x0089, r25
 122:	80 93 88 00 	sts	0x0088, r24
	/*TCCR1A = 0;
	TCCR1C = 0;*/
	TCNT1 = 0;
 126:	10 92 85 00 	sts	0x0085, r1
 12a:	10 92 84 00 	sts	0x0084, r1
}
 12e:	08 95       	ret

00000130 <__vector_17>:

//!use the right letter!
SIGNAL(TIMER1_COMPA_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
	PORTA ^= 0xFF;
 13c:	82 b1       	in	r24, 0x02	; 2
 13e:	80 95       	com	r24
 140:	82 b9       	out	0x02, r24	; 2
}
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_25>:

SIGNAL(USART1_RX_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	// Enable timer interrupts
	TIMSK1 = (1<<OCIE1A);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 6f 00 	sts	0x006F, r24
	// Read UART
	uint8_t a = UDR1;
 176:	60 91 ce 00 	lds	r22, 0x00CE
	// do stuff
	if(a == '0') {			// LED OFF
 17a:	60 33       	cpi	r22, 0x30	; 48
 17c:	21 f4       	brne	.+8      	; 0x186 <__vector_25+0x38>
		TIMSK1 = 0;
 17e:	10 92 6f 00 	sts	0x006F, r1
		PORTA = 0;
 182:	12 b8       	out	0x02, r1	; 2
 184:	12 c0       	rjmp	.+36     	; 0x1aa <__vector_25+0x5c>
	} else if (a >= '1' && a <= '9'){
 186:	86 2f       	mov	r24, r22
 188:	81 53       	subi	r24, 0x31	; 49
 18a:	89 30       	cpi	r24, 0x09	; 9
 18c:	50 f4       	brcc	.+20     	; 0x1a2 <__vector_25+0x54>
		uint8_t num = a - '0';
 18e:	60 53       	subi	r22, 0x30	; 48
		uint16_t oncePerSecond = F_CPU/PRESCALER/2;
		write_values(oncePerSecond / num);
 190:	80 ed       	ldi	r24, 0xD0	; 208
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__udivmodhi4>
 19a:	cb 01       	movw	r24, r22
 19c:	0e 94 8f 00 	call	0x11e	; 0x11e <write_values>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__vector_25+0x5c>
	} else {					// LED ON
		TIMSK1 = 0;
 1a2:	10 92 6f 00 	sts	0x006F, r1
		PORTA = 0x01;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	82 b9       	out	0x02, r24	; 2
	}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__udivmodhi4>:
 1cc:	aa 1b       	sub	r26, r26
 1ce:	bb 1b       	sub	r27, r27
 1d0:	51 e1       	ldi	r21, 0x11	; 17
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <__udivmodhi4_ep>

000001d4 <__udivmodhi4_loop>:
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	a6 17       	cp	r26, r22
 1da:	b7 07       	cpc	r27, r23
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <__udivmodhi4_ep>
 1de:	a6 1b       	sub	r26, r22
 1e0:	b7 0b       	sbc	r27, r23

000001e2 <__udivmodhi4_ep>:
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	5a 95       	dec	r21
 1e8:	a9 f7       	brne	.-22     	; 0x1d4 <__udivmodhi4_loop>
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
