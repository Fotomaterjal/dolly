
ul1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000022e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000480  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ed  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ad  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e2       	ldi	r30, 0x2E	; 46
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  ce:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <sendVoltage>:
	ADCSRA = (1 << ADIF);	
}

void sendVoltage(uint8_t number){
	//load value to UART sending register
	UDR1 = number;
  d6:	80 93 ce 00 	sts	0x00CE, r24
	//wait loop for send to be completed
	while(~UCSR1A&(1 << TXC1)){
  da:	80 91 c8 00 	lds	r24, 0x00C8
  de:	86 fd       	sbrc	r24, 6
  e0:	06 c0       	rjmp	.+12     	; 0xee <sendVoltage+0x18>
  e2:	e8 ec       	ldi	r30, 0xC8	; 200
  e4:	f0 e0       	ldi	r31, 0x00	; 0
		asm("nop");
  e6:	00 00       	nop

void sendVoltage(uint8_t number){
	//load value to UART sending register
	UDR1 = number;
	//wait loop for send to be completed
	while(~UCSR1A&(1 << TXC1)){
  e8:	80 81       	ld	r24, Z
  ea:	86 ff       	sbrs	r24, 6
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <sendVoltage+0x10>
		asm("nop");
	}
	//clearing TX complete flag
	UCSR1A |= (1 << TXC1);
  ee:	e8 ec       	ldi	r30, 0xC8	; 200
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
}
  f8:	08 95       	ret

000000fa <measureVoltage>:
}


void measureVoltage(){
	//ADC enable, ADC start conversion
	ADCSRA = (1 << ADEN);
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
	//loop for checking ADIF flag
	while(~ADCSRA&(1 << ADIF)){
 108:	80 81       	ld	r24, Z
 10a:	84 fd       	sbrc	r24, 4
 10c:	04 c0       	rjmp	.+8      	; 0x116 <measureVoltage+0x1c>
		asm("nop");
 10e:	00 00       	nop
void measureVoltage(){
	//ADC enable, ADC start conversion
	ADCSRA = (1 << ADEN);
	ADCSRA |= (1 << ADSC);
	//loop for checking ADIF flag
	while(~ADCSRA&(1 << ADIF)){
 110:	80 81       	ld	r24, Z
 112:	84 ff       	sbrs	r24, 4
 114:	fc cf       	rjmp	.-8      	; 0x10e <measureVoltage+0x14>
		asm("nop");
	}
	//if conversion complete, reset ADIF flag
	ADCSRA = (1 << ADIF);	
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	80 93 7a 00 	sts	0x007A, r24
}
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
	//UART
	//setting baud rate to 9600
	UBRR1 = 25;
 11e:	89 e1       	ldi	r24, 0x19	; 25
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 cd 00 	sts	0x00CD, r25
 126:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A |= (1 << U2X1);	
 12a:	e8 ec       	ldi	r30, 0xC8	; 200
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
	//setting up 8 data bits
	UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
 134:	ea ec       	ldi	r30, 0xCA	; 202
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	86 60       	ori	r24, 0x06	; 6
 13c:	80 83       	st	Z, r24
	//enabling transmitter
	UCSR1B |= (1 << TXEN1);
 13e:	e9 ec       	ldi	r30, 0xC9	; 201
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
	
	//ADC
	//selecting reference voltage VCC, measure voltage on pin ADC2
	ADMUX |= (1 << REFS0 | 1 << MUX1);
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 64       	ori	r24, 0x42	; 66
 150:	80 83       	st	Z, r24
	////ADC enable
	//ADCSRA |= (1 << ADEN);
	
	//PORT A to output
	DDRA = 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	81 b9       	out	0x01, r24	; 1
	
    while(1)
    {
        measureVoltage();
		if(ADC < 101){
 156:	c8 e7       	ldi	r28, 0x78	; 120
 158:	d0 e0       	ldi	r29, 0x00	; 0
	//PORT A to output
	DDRA = 0xFF;
	
    while(1)
    {
        measureVoltage();
 15a:	0e 94 7d 00 	call	0xfa	; 0xfa <measureVoltage>
		if(ADC < 101){
 15e:	88 81       	ld	r24, Y
 160:	99 81       	ldd	r25, Y+1	; 0x01
 162:	85 36       	cpi	r24, 0x65	; 101
 164:	91 05       	cpc	r25, r1
 166:	28 f4       	brcc	.+10     	; 0x172 <main+0x54>
				sendVoltage('0');
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 170:	f4 cf       	rjmp	.-24     	; 0x15a <main+0x3c>
		}else if(ADC < 201){
 172:	88 81       	ld	r24, Y
 174:	99 81       	ldd	r25, Y+1	; 0x01
 176:	89 3c       	cpi	r24, 0xC9	; 201
 178:	91 05       	cpc	r25, r1
 17a:	28 f4       	brcc	.+10     	; 0x186 <main+0x68>
				sendVoltage('1');
 17c:	81 e3       	ldi	r24, 0x31	; 49
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 184:	ea cf       	rjmp	.-44     	; 0x15a <main+0x3c>
		}else if(ADC < 301){
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	8d 32       	cpi	r24, 0x2D	; 45
 18e:	92 07       	cpc	r25, r18
 190:	28 f4       	brcc	.+10     	; 0x19c <main+0x7e>
			sendVoltage('2');
 192:	82 e3       	ldi	r24, 0x32	; 50
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 19a:	df cf       	rjmp	.-66     	; 0x15a <main+0x3c>
		}else if(ADC < 401){
 19c:	88 81       	ld	r24, Y
 19e:	99 81       	ldd	r25, Y+1	; 0x01
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	81 39       	cpi	r24, 0x91	; 145
 1a4:	92 07       	cpc	r25, r18
 1a6:	28 f4       	brcc	.+10     	; 0x1b2 <main+0x94>
			sendVoltage('3');
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 1b0:	d4 cf       	rjmp	.-88     	; 0x15a <main+0x3c>
		}else if(ADC < 501){
 1b2:	88 81       	ld	r24, Y
 1b4:	99 81       	ldd	r25, Y+1	; 0x01
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	85 3f       	cpi	r24, 0xF5	; 245
 1ba:	92 07       	cpc	r25, r18
 1bc:	28 f4       	brcc	.+10     	; 0x1c8 <main+0xaa>
			sendVoltage('4');
 1be:	84 e3       	ldi	r24, 0x34	; 52
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 1c6:	c9 cf       	rjmp	.-110    	; 0x15a <main+0x3c>
		}else if(ADC < 601){
 1c8:	88 81       	ld	r24, Y
 1ca:	99 81       	ldd	r25, Y+1	; 0x01
 1cc:	22 e0       	ldi	r18, 0x02	; 2
 1ce:	89 35       	cpi	r24, 0x59	; 89
 1d0:	92 07       	cpc	r25, r18
 1d2:	28 f4       	brcc	.+10     	; 0x1de <main+0xc0>
			sendVoltage('5');
 1d4:	85 e3       	ldi	r24, 0x35	; 53
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 1dc:	be cf       	rjmp	.-132    	; 0x15a <main+0x3c>
		}else if(ADC < 701){
 1de:	88 81       	ld	r24, Y
 1e0:	99 81       	ldd	r25, Y+1	; 0x01
 1e2:	22 e0       	ldi	r18, 0x02	; 2
 1e4:	8d 3b       	cpi	r24, 0xBD	; 189
 1e6:	92 07       	cpc	r25, r18
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <main+0xd6>
			sendVoltage('6');
 1ea:	86 e3       	ldi	r24, 0x36	; 54
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 1f2:	b3 cf       	rjmp	.-154    	; 0x15a <main+0x3c>
		}else if(ADC < 801){
 1f4:	88 81       	ld	r24, Y
 1f6:	99 81       	ldd	r25, Y+1	; 0x01
 1f8:	23 e0       	ldi	r18, 0x03	; 3
 1fa:	81 32       	cpi	r24, 0x21	; 33
 1fc:	92 07       	cpc	r25, r18
 1fe:	28 f4       	brcc	.+10     	; 0x20a <main+0xec>
			sendVoltage('7');
 200:	87 e3       	ldi	r24, 0x37	; 55
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 208:	a8 cf       	rjmp	.-176    	; 0x15a <main+0x3c>
		}else if(ADC < 901){
 20a:	88 81       	ld	r24, Y
 20c:	99 81       	ldd	r25, Y+1	; 0x01
 20e:	23 e0       	ldi	r18, 0x03	; 3
 210:	85 38       	cpi	r24, 0x85	; 133
 212:	92 07       	cpc	r25, r18
 214:	28 f4       	brcc	.+10     	; 0x220 <main+0x102>
			sendVoltage('8');
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 21e:	9d cf       	rjmp	.-198    	; 0x15a <main+0x3c>
		}else{
			sendVoltage('9');
 220:	89 e3       	ldi	r24, 0x39	; 57
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendVoltage>
 228:	98 cf       	rjmp	.-208    	; 0x15a <main+0x3c>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
