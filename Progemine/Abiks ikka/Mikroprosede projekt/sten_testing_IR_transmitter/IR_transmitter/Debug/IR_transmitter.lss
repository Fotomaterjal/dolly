
IR_transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a9  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000156  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011e  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e1       	ldi	r30, 0x1A	; 26
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 88 00 	call	0x110	; 0x110 <main>
  ce:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <transmit_zero>:
        transmit_zero();
    }
}


void transmit_zero(){
  d6:	84 e1       	ldi	r24, 0x14	; 20
  d8:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < 20; i++){
		//on
		PORTD |= 0x20;
  da:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	27 e0       	ldi	r18, 0x07	; 7
  de:	2a 95       	dec	r18
  e0:	f1 f7       	brne	.-4      	; 0xde <transmit_zero+0x8>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <transmit_zero+0xe>
		_delay_us(23);
		//off
		PORTD &= ~(0x20);
  e4:	5d 98       	cbi	0x0b, 5	; 11
  e6:	27 e0       	ldi	r18, 0x07	; 7
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <transmit_zero+0x12>
  ec:	00 c0       	rjmp	.+0      	; 0xee <transmit_zero+0x18>
  ee:	01 97       	sbiw	r24, 0x01	; 1
    }
}


void transmit_zero(){
	for(int i = 0; i < 20; i++){
  f0:	a1 f7       	brne	.-24     	; 0xda <transmit_zero+0x4>
  f2:	84 e1       	ldi	r24, 0x14	; 20
  f4:	90 e0       	ldi	r25, 0x00	; 0
		//off
		PORTD &= ~(0x20);
		_delay_us(23);
	}	
	for(int i = 0; i < 20; i++){
		asm("nop");
  f6:	00 00       	nop
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	2a 95       	dec	r18
  fc:	f1 f7       	brne	.-4      	; 0xfa <transmit_zero+0x24>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <transmit_zero+0x2a>
		_delay_us(23);
		asm("nop");
 100:	00 00       	nop
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <transmit_zero+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <transmit_zero+0x34>
 10a:	01 97       	sbiw	r24, 0x01	; 1
		_delay_us(23);
		//off
		PORTD &= ~(0x20);
		_delay_us(23);
	}	
	for(int i = 0; i < 20; i++){
 10c:	a1 f7       	brne	.-24     	; 0xf6 <transmit_zero+0x20>
		asm("nop");
		_delay_us(23);
		asm("nop");
		_delay_us(23);
	}
}
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
    while(1)
    {
        transmit_zero();
 110:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit_zero>
 114:	fd cf       	rjmp	.-6      	; 0x110 <main>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
