
IR_katsetus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d8  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000135  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039b  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000102  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e5       	ldi	r30, 0x52	; 82
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  ce:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:
void delay(uint8_t x);

int main(void)
{
	
	DDRD = 0x20;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	8a b9       	out	0x0a, r24	; 10
	DDRA = 0x20;
  da:	81 b9       	out	0x01, r24	; 1
			PORTD & ~(0x20);
			_delay_us(27);
			}
		}*/
				
			for(int i = 0; i<10; i++){
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	e4 e1       	ldi	r30, 0x14	; 20
  e2:	f0 e0       	ldi	r31, 0x00	; 0
				for(int i=0; i<20; i++){
					PORTD ^= 0x20;
  e4:	40 e2       	ldi	r20, 0x20	; 32
			PORTD & ~(0x20);
			_delay_us(27);
			}
		}*/
				
			for(int i = 0; i<10; i++){
  e6:	aa e0       	ldi	r26, 0x0A	; 10
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	5e 2f       	mov	r21, r30
  ec:	6f 2f       	mov	r22, r31
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <main+0x46>
  f4:	cf 01       	movw	r24, r30
				for(int i=0; i<20; i++){
					PORTD ^= 0x20;
  f6:	7b b1       	in	r23, 0x0b	; 11
  f8:	74 27       	eor	r23, r20
  fa:	7b b9       	out	0x0b, r23	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	79 e0       	ldi	r23, 0x09	; 9
  fe:	7a 95       	dec	r23
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x28>
 102:	01 97       	sbiw	r24, 0x01	; 1
			_delay_us(27);
			}
		}*/
				
			for(int i = 0; i<10; i++){
				for(int i=0; i<20; i++){
 104:	c1 f7       	brne	.-16     	; 0xf6 <main+0x20>
 106:	cf 01       	movw	r24, r30
					PORTD ^= 0x20;
					_delay_us(27);
			
				}
				for(int i=0; i<20; i++){
					PORTD & ~(0x20);
 108:	7b b1       	in	r23, 0x0b	; 11
 10a:	79 e0       	ldi	r23, 0x09	; 9
 10c:	7a 95       	dec	r23
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x36>
 110:	01 97       	sbiw	r24, 0x01	; 1
				for(int i=0; i<20; i++){
					PORTD ^= 0x20;
					_delay_us(27);
			
				}
				for(int i=0; i<20; i++){
 112:	d1 f7       	brne	.-12     	; 0x108 <main+0x32>
			PORTD & ~(0x20);
			_delay_us(27);
			}
		}*/
				
			for(int i = 0; i<10; i++){
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0x46>
 11a:	9e 01       	movw	r18, r28
 11c:	2a 30       	cpi	r18, 0x0A	; 10
 11e:	31 05       	cpc	r19, r1
 120:	4c f3       	brlt	.-46     	; 0xf4 <main+0x1e>
 122:	9d 01       	movw	r18, r26
 124:	11 c0       	rjmp	.+34     	; 0x148 <main+0x72>
				}
			}
			
			for(int i = 0; i<10; i++){
				for(int i=0; i<20; i++){
					PORTD & ~(0x20);
 126:	7b b1       	in	r23, 0x0b	; 11
 128:	79 e0       	ldi	r23, 0x09	; 9
 12a:	7a 95       	dec	r23
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x54>
 12e:	01 97       	sbiw	r24, 0x01	; 1
					_delay_us(27);
				}
			}
			
			for(int i = 0; i<10; i++){
				for(int i=0; i<20; i++){
 130:	d1 f7       	brne	.-12     	; 0x126 <main+0x50>
 132:	85 2f       	mov	r24, r21
 134:	96 2f       	mov	r25, r22
					PORTD & ~(0x20);
					_delay_us(27);
					
				}
				for(int i=0; i<20; i++){
					PORTD & ~(0x20);
 136:	7b b1       	in	r23, 0x0b	; 11
 138:	79 e0       	ldi	r23, 0x09	; 9
 13a:	7a 95       	dec	r23
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x64>
 13e:	01 97       	sbiw	r24, 0x01	; 1
				for(int i=0; i<20; i++){
					PORTD & ~(0x20);
					_delay_us(27);
					
				}
				for(int i=0; i<20; i++){
 140:	d1 f7       	brne	.-12     	; 0x136 <main+0x60>
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
					PORTD & ~(0x20);
					_delay_us(27);
				}
			}
			
			for(int i = 0; i<10; i++){
 146:	49 f3       	breq	.-46     	; 0x11a <main+0x44>
			PORTD & ~(0x20);
			_delay_us(27);
			}
		}*/
				
			for(int i = 0; i<10; i++){
 148:	85 2f       	mov	r24, r21
 14a:	96 2f       	mov	r25, r22
 14c:	ec cf       	rjmp	.-40     	; 0x126 <main+0x50>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
