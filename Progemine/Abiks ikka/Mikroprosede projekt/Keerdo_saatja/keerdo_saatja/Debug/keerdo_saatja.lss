
keerdo_saatja.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000322  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000721  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000225  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b6  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017a  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f9  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_23>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e8       	ldi	r30, 0x8E	; 142
  ac:	f2 e0       	ldi	r31, 0x02	; 2
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a9 30       	cpi	r26, 0x09	; 9
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  ce:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <binconv>:
	sendPause();
}

//Converts the given integer value into a char array.
void binconv(int val, char* bin)
{
  d6:	fb 01       	movw	r30, r22
	int i;
	//Line terminator
	bin[4] = '\0';
  d8:	14 82       	std	Z+4, r1	; 0x04
	}
	sendPause();
}

//Converts the given integer value into a char array.
void binconv(int val, char* bin)
  da:	34 96       	adiw	r30, 0x04	; 4
{
	int i;
	//Line terminator
	bin[4] = '\0';
	for (i = 3; i >= 0; --i, val >>= 1)
  dc:	23 e0       	ldi	r18, 0x03	; 3
  de:	30 e0       	ldi	r19, 0x00	; 0
	{
		bin[i] = (val & 1) + '0';
  e0:	48 2f       	mov	r20, r24
  e2:	41 70       	andi	r20, 0x01	; 1
  e4:	40 5d       	subi	r20, 0xD0	; 208
  e6:	42 93       	st	-Z, r20
void binconv(int val, char* bin)
{
	int i;
	//Line terminator
	bin[4] = '\0';
	for (i = 3; i >= 0; --i, val >>= 1)
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	95 95       	asr	r25
  ee:	87 95       	ror	r24
  f0:	4f ef       	ldi	r20, 0xFF	; 255
  f2:	2f 3f       	cpi	r18, 0xFF	; 255
  f4:	34 07       	cpc	r19, r20
  f6:	a1 f7       	brne	.-24     	; 0xe0 <binconv+0xa>
	{
		bin[i] = (val & 1) + '0';
	}
}
  f8:	08 95       	ret

000000fa <sendDelay>:
		i++;
	}
}

//Sends the protocol delay - 20*27 microseconds of pause.
void sendDelay(){
  fa:	84 e1       	ldi	r24, 0x14	; 20
	uint8_t i = 0;
	while(i<20){
		asm("nop");
  fc:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <sendDelay+0x6>
 104:	00 c0       	rjmp	.+0      	; 0x106 <sendDelay+0xc>
		_delay_us(23);
		
		asm("nop");
 106:	00 00       	nop
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <sendDelay+0x10>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <sendDelay+0x16>
 110:	81 50       	subi	r24, 0x01	; 1
}

//Sends the protocol delay - 20*27 microseconds of pause.
void sendDelay(){
	uint8_t i = 0;
	while(i<20){
 112:	a1 f7       	brne	.-24     	; 0xfc <sendDelay+0x2>
		
		asm("nop");
		_delay_us(23);
		i++;
	}
}
 114:	08 95       	ret

00000116 <__vector_23>:
uint8_t ledmask = 0x00;
int adcresult = 0;
char bin[4];

//Timer overflows 7  times per second with the 1024 prescaler.
ISR(TIMER0_OVF_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	//Read ADC result, divide by 64 to get it down to 4 bits and send over IR.
	ADCSRA = (1<<ADEN | 1<<ADSC | 1<<ADIF);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 ed       	ldi	r24, 0xD0	; 208
 142:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADSC))!=0){
 144:	80 81       	ld	r24, Z
 146:	86 ff       	sbrs	r24, 6
 148:	04 c0       	rjmp	.+8      	; 0x152 <__vector_23+0x3c>
		asm("nop");
 14a:	00 00       	nop

//Timer overflows 7  times per second with the 1024 prescaler.
ISR(TIMER0_OVF_vect){
	//Read ADC result, divide by 64 to get it down to 4 bits and send over IR.
	ADCSRA = (1<<ADEN | 1<<ADSC | 1<<ADIF);
	while((ADCSRA&(1<<ADSC))!=0){
 14c:	80 81       	ld	r24, Z
 14e:	86 fd       	sbrc	r24, 6
 150:	fc cf       	rjmp	.-8      	; 0x14a <__vector_23+0x34>
		asm("nop");
	}
	adcresult = ADC;
 152:	20 91 78 00 	lds	r18, 0x0078
 156:	30 91 79 00 	lds	r19, 0x0079
 15a:	20 93 00 01 	sts	0x0100, r18
 15e:	30 93 01 01 	sts	0x0101, r19
	uint8_t conv = adcresult/64;
 162:	82 2f       	mov	r24, r18
 164:	93 2f       	mov	r25, r19
 166:	99 23       	and	r25, r25
 168:	0c f4       	brge	.+2      	; 0x16c <__vector_23+0x56>
 16a:	cf 96       	adiw	r24, 0x3f	; 63
 16c:	08 2e       	mov	r0, r24
 16e:	89 2f       	mov	r24, r25
 170:	00 0c       	add	r0, r0
 172:	88 1f       	adc	r24, r24
 174:	99 0b       	sbc	r25, r25
 176:	00 0c       	add	r0, r0
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
	binconv(conv, bin);
 17c:	c5 e0       	ldi	r28, 0x05	; 5
 17e:	d1 e0       	ldi	r29, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	be 01       	movw	r22, r28
 184:	0e 94 6b 00 	call	0xd6	; 0xd6 <binconv>
	sendWord(bin);
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 0a 01 	call	0x214	; 0x214 <sendWord>

	
	
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <sendPulse>:
//Sends 1 data pulse over IR led - 20 bursts,
void sendPulse(){
 1b4:	84 e1       	ldi	r24, 0x14	; 20
	uint8_t i = 0;
	while(i<20){
		PORTD = mask1;
 1b6:	90 91 04 01 	lds	r25, 0x0104
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	97 e0       	ldi	r25, 0x07	; 7
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <sendPulse+0xa>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <sendPulse+0x10>
		_delay_us(23);
		
		PORTD = mask2;
 1c4:	90 91 03 01 	lds	r25, 0x0103
 1c8:	9b b9       	out	0x0b, r25	; 11
 1ca:	97 e0       	ldi	r25, 0x07	; 7
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <sendPulse+0x18>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <sendPulse+0x1e>
 1d2:	81 50       	subi	r24, 0x01	; 1
	
}
//Sends 1 data pulse over IR led - 20 bursts,
void sendPulse(){
	uint8_t i = 0;
	while(i<20){
 1d4:	81 f7       	brne	.-32     	; 0x1b6 <sendPulse+0x2>
		
		PORTD = mask2;
		_delay_us(23);
		i++;
	}
}
 1d6:	08 95       	ret

000001d8 <sendBit>:
// 1 bit - 20 bursts, 20 pauses.
void sendBit(){
	sendPulse();
 1d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <sendPulse>
	sendDelay();
 1dc:	0e 94 7d 00 	call	0xfa	; 0xfa <sendDelay>
}
 1e0:	08 95       	ret

000001e2 <sendNull>:
// 0 bit - 40 pauses
void sendNull(){
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	sendDelay();
 1e6:	cd e7       	ldi	r28, 0x7D	; 125
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	fe 01       	movw	r30, r28
 1ec:	09 95       	icall
	sendDelay();
 1ee:	fe 01       	movw	r30, r28
 1f0:	09 95       	icall
	
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <sendPause>:

//Pause between two messages if transmitting constantly.
void sendPause(){
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
	
	uint8_t i = 0;
	while(i<200){
		asm("nop");
 1fa:	00 00       	nop
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <sendPause+0x6>
 202:	00 c0       	rjmp	.+0      	; 0x204 <sendPause+0xc>
		_delay_us(23);
		
		asm("nop");
 204:	00 00       	nop
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	9a 95       	dec	r25
 20a:	f1 f7       	brne	.-4      	; 0x208 <sendPause+0x10>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <sendPause+0x16>
 20e:	81 50       	subi	r24, 0x01	; 1

//Pause between two messages if transmitting constantly.
void sendPause(){
	
	uint8_t i = 0;
	while(i<200){
 210:	a1 f7       	brne	.-24     	; 0x1fa <sendPause+0x2>
		
		asm("nop");
		_delay_us(23);
		i++;
	}
}
 212:	08 95       	ret

00000214 <sendWord>:
		i++;
	}
}

//Sends the 4-bit data over infrared LED to KITTBOARD
void sendWord(char* binstr){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	d8 2f       	mov	r29, r24
 21e:	c9 2f       	mov	r28, r25
	sendBit();
 220:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendBit>
 224:	0d 2f       	mov	r16, r29
 226:	1c 2f       	mov	r17, r28
	for(int i=0;i<4;i++){
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
		if(binstr[i]=='1'){
 22c:	f8 01       	movw	r30, r16
 22e:	81 91       	ld	r24, Z+
 230:	8f 01       	movw	r16, r30
 232:	81 33       	cpi	r24, 0x31	; 49
 234:	19 f4       	brne	.+6      	; 0x23c <sendWord+0x28>
			sendBit();
 236:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendBit>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <sendWord+0x2c>
		} else {
			sendNull();
 23c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <sendNull>
}

//Sends the 4-bit data over infrared LED to KITTBOARD
void sendWord(char* binstr){
	sendBit();
	for(int i=0;i<4;i++){
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	c4 30       	cpi	r28, 0x04	; 4
 244:	d1 05       	cpc	r29, r1
 246:	91 f7       	brne	.-28     	; 0x22c <sendWord+0x18>
			sendBit();
		} else {
			sendNull();
		}
	}
	sendPause();
 248:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <sendPause>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:


int main(void)
{
	//LEDs for debugging.
	DDRA = 0xFF;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	81 b9       	out	0x01, r24	; 1
	
	cli();
 25a:	f8 94       	cli
	//IR Led init
	mask1 = PORTD | (1<<PD5);
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	80 93 04 01 	sts	0x0104, r24
	mask2 = PORTD & ~(1<<PD5);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8f 7d       	andi	r24, 0xDF	; 223
 268:	80 93 03 01 	sts	0x0103, r24
	DDRD = (DDRD | (1<<PD5));
 26c:	55 9a       	sbi	0x0a, 5	; 10
	
	//Tim0 init.
	TCCR0B = (1<<CS00 | 1<<CS02);	//Timer with 1024 prescaler, we want it to interrupt 7 times per second.
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);	//Timer overflow interrupt.
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 6e 00 	sts	0x006E, r24
	sei();
 278:	78 94       	sei
	//ADC Init
	ADMUX = (1 << REFS0 | 1 << MUX1);
 27a:	82 e4       	ldi	r24, 0x42	; 66
 27c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN | 1 << ADSC);
 280:	80 ec       	ldi	r24, 0xC0	; 192
 282:	80 93 7a 00 	sts	0x007A, r24
	
	while(1)
	{
		asm("nop"); //Let the code stall, wait for interrupts.
 286:	00 00       	nop
 288:	fe cf       	rjmp	.-4      	; 0x286 <main+0x30>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
