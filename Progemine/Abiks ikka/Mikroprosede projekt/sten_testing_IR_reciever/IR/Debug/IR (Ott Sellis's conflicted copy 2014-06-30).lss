
IR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fe  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f6  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003aa  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000199  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_17>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_20>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_32>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_35>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e4 e6       	ldi	r30, 0x64	; 100
  ac:	f3 e0       	ldi	r31, 0x03	; 3
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 30       	cpi	r26, 0x02	; 2
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ce:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <drive>:
    }
}


void drive(uint8_t state){
	if(state == OTSE){
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <drive+0xc>
		whatToDo = OTSE;
  da:	95 e0       	ldi	r25, 0x05	; 5
  dc:	90 93 00 01 	sts	0x0100, r25
  e0:	14 c0       	rjmp	.+40     	; 0x10a <drive+0x34>
	}
	else if(state == VASAK){
  e2:	89 30       	cpi	r24, 0x09	; 9
  e4:	21 f4       	brne	.+8      	; 0xee <drive+0x18>
		whatToDo = VASAK;
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	90 93 00 01 	sts	0x0100, r25
  ec:	0e c0       	rjmp	.+28     	; 0x10a <drive+0x34>
	}
	else if(state == PAREM){
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	21 f4       	brne	.+8      	; 0xfa <drive+0x24>
		whatToDo = PAREM;
  f2:	96 e0       	ldi	r25, 0x06	; 6
  f4:	90 93 00 01 	sts	0x0100, r25
  f8:	08 c0       	rjmp	.+16     	; 0x10a <drive+0x34>
	}
	else if(state == TAGASI){
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	21 f4       	brne	.+8      	; 0x106 <drive+0x30>
		whatToDo = TAGASI;
  fe:	9a e0       	ldi	r25, 0x0A	; 10
 100:	90 93 00 01 	sts	0x0100, r25
 104:	02 c0       	rjmp	.+4      	; 0x10a <drive+0x34>
	}
	else{
		whatToDo = STOP;
 106:	10 92 00 01 	sts	0x0100, r1
	}
	PORTA = state;
 10a:	82 b9       	out	0x02, r24	; 2
}
 10c:	08 95       	ret

0000010e <main>:
uint16_t whatRight(uint8_t whatToDo);

int main(void)
{
	//setting port b pin5 and LED-s (testing) to output
	DDRB = (1 << PB5 | 1 << PB4);
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 b9       	out	0x01, r24	; 1
	
	//ADC
	//selecting reference voltage VCC, measure voltage on pin ADC2
	ADMUX |= (1 << REFS0 | 1 << MUX1);
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 64       	ori	r24, 0x42	; 66
 11e:	80 83       	st	Z, r24
	
	//TIMER1
	//initializing timer values
	TCNT1 = 0;
 120:	10 92 85 00 	sts	0x0085, r1
 124:	10 92 84 00 	sts	0x0084, r1
	TCCR1A = 0;
 128:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
	TCCR1C = 0;
 132:	10 92 82 00 	sts	0x0082, r1
	//setting 1 CPU clock, set normal mode for TCCR1B
	TCCR1B = (1 << CS10);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
	//loading OCR1A with 40000 to have 20ms delay between pwm pulses
	OCR1A = 25536;
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	93 e6       	ldi	r25, 0x63	; 99
 13e:	90 93 89 00 	sts	0x0089, r25
 142:	80 93 88 00 	sts	0x0088, r24
	//OCR1B = 25536;
	//setting TCCR1 to "non-PWM", setting OC1A low after compare match
	//TCCR1A = (1<<COM1A1);
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	80 93 6f 00 	sts	0x006F, r24
 14c:	88 eb       	ldi	r24, 0xB8	; 184
 14e:	9b e0       	ldi	r25, 0x0B	; 11
	//WriteTCNT1(0xD6D8);
	
	// To unsync the timers
	for(int i = 0; i < 3000; i++){
		asm("nop");
 150:	00 00       	nop
 152:	01 97       	sbiw	r24, 0x01	; 1
	//TCCR1A = (1<<COM1A1);
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
	//WriteTCNT1(0xD6D8);
	
	// To unsync the timers
	for(int i = 0; i < 3000; i++){
 154:	e9 f7       	brne	.-6      	; 0x150 <main+0x42>
		asm("nop");
	}
	
	//TIMER3
	//initializing timer values
	TCNT3 = 0;
 156:	10 92 95 00 	sts	0x0095, r1
 15a:	10 92 94 00 	sts	0x0094, r1
	TCCR3A = 0;
 15e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
 162:	e1 e9       	ldi	r30, 0x91	; 145
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
	TCCR3C = 0;
 168:	10 92 92 00 	sts	0x0092, r1
	//setting CPU clock, set normal mode for TCCR1B
	TCCR3B = (1 << CS30);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	//loading OCR1A with 40000 to have 20ms delay between pwm pulses
	OCR3A = 25536;
 170:	80 ec       	ldi	r24, 0xC0	; 192
 172:	93 e6       	ldi	r25, 0x63	; 99
 174:	90 93 99 00 	sts	0x0099, r25
 178:	80 93 98 00 	sts	0x0098, r24
	//OCR1B = 25536;
	//setting TCCR1 to "non-PWM", setting OC1A low after compare match
	//TCCR1A = (1<<COM1A1);
	TIMSK3 = (1 << TOIE3)| (1 << OCIE1A);
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	80 93 71 00 	sts	0x0071, r24
	//WriteTCNT1(0xD6D8);

	sei();
 182:	78 94       	sei
	
	while((PINE & 0x20) == 0x20){
 184:	65 9b       	sbis	0x0c, 5	; 12
 186:	04 c0       	rjmp	.+8      	; 0x190 <main+0x82>
		whatToDo = STOP;
 188:	10 92 00 01 	sts	0x0100, r1
	TIMSK3 = (1 << TOIE3)| (1 << OCIE1A);
	//WriteTCNT1(0xD6D8);

	sei();
	
	while((PINE & 0x20) == 0x20){
 18c:	65 99       	sbic	0x0c, 5	; 12
 18e:	fc cf       	rjmp	.-8      	; 0x188 <main+0x7a>
		whatToDo = STOP;
	}
	
    while(1)
    {
		if((PINE & 0x20) == 0x00){
 190:	65 99       	sbic	0x0c, 5	; 12
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x88>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x8e>
 19c:	af e1       	ldi	r26, 0x1F	; 31
 19e:	b2 e0       	ldi	r27, 0x02	; 2
 1a0:	11 97       	sbiw	r26, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x92>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x98>
			//cli();
			_delay_us(fixation_delay);
			
			_delay_us(pulsipikkus);
			if((PINE & 0x20) == 0x00){
 1a6:	65 99       	sbic	0x0c, 5	; 12
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <main+0xa6>
				state += 1;
 1aa:	80 91 01 01 	lds	r24, 0x0101
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 01 01 	sts	0x0101, r24
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0xaa>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xb0>
			}			
			_delay_us(pulsipikkus);
			if((PINE & 0x20) == 0x00){
 1be:	65 99       	sbic	0x0c, 5	; 12
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <main+0xbe>
				state += 2;
 1c2:	80 91 01 01 	lds	r24, 0x0101
 1c6:	8e 5f       	subi	r24, 0xFE	; 254
 1c8:	80 93 01 01 	sts	0x0101, r24
 1cc:	af e1       	ldi	r26, 0x1F	; 31
 1ce:	b2 e0       	ldi	r27, 0x02	; 2
 1d0:	11 97       	sbiw	r26, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0xc2>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xc8>
			}				
			_delay_us(pulsipikkus);
			if((PINE & 0x20) == 0x00){
 1d6:	65 99       	sbic	0x0c, 5	; 12
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <main+0xd6>
				state += 4;
 1da:	80 91 01 01 	lds	r24, 0x0101
 1de:	8c 5f       	subi	r24, 0xFC	; 252
 1e0:	80 93 01 01 	sts	0x0101, r24
 1e4:	8f e1       	ldi	r24, 0x1F	; 31
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xda>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xe0>
			}				
			_delay_us(pulsipikkus);
			if((PINE & 0x20) == 0x00){
 1ee:	65 99       	sbic	0x0c, 5	; 12
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <main+0xee>
				state += 8;
 1f2:	80 91 01 01 	lds	r24, 0x0101
 1f6:	88 5f       	subi	r24, 0xF8	; 248
 1f8:	80 93 01 01 	sts	0x0101, r24
			}			
			
			drive(state);
 1fc:	80 91 01 01 	lds	r24, 0x0101
 200:	0e 94 6b 00 	call	0xd6	; 0xd6 <drive>
			state = 0;
 204:	10 92 01 01 	sts	0x0101, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	8f e5       	ldi	r24, 0x5F	; 95
 20a:	9a ee       	ldi	r25, 0xEA	; 234
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	a0 40       	sbci	r26, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x100>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x10a>
 218:	00 00       	nop
 21a:	ba cf       	rjmp	.-140    	; 0x190 <main+0x82>

0000021c <WriteTCNT>:
	unsigned char sreg;
	//TCNT3 = 0;
	//TCNT1 = 0;
	//uint16_t i;
	/* Save global interrupt flag */
	sreg = SREG;
 21c:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
 21e:	f8 94       	cli
	/* Set TCNTn to i */
	if(which == 3){
 220:	63 30       	cpi	r22, 0x03	; 3
 222:	29 f4       	brne	.+10     	; 0x22e <WriteTCNT+0x12>
		TCNT3 = i;
 224:	90 93 95 00 	sts	0x0095, r25
 228:	80 93 94 00 	sts	0x0094, r24
 22c:	04 c0       	rjmp	.+8      	; 0x236 <WriteTCNT+0x1a>
	}else{
		TCNT1 = i;
 22e:	90 93 85 00 	sts	0x0085, r25
 232:	80 93 84 00 	sts	0x0084, r24
	}
	/* Restore global interrupt flag */
	SREG = sreg;
 236:	2f bf       	out	0x3f, r18	; 63
}
 238:	08 95       	ret

0000023a <whatRight>:

uint16_t whatRight(uint8_t whatToDo){
	uint16_t result;
	
	if(whatToDo == 0x05 || whatToDo == 0x09){
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	49 f0       	breq	.+18     	; 0x250 <whatRight+0x16>
 23e:	89 30       	cpi	r24, 0x09	; 9
 240:	51 f0       	breq	.+20     	; 0x256 <whatRight+0x1c>
		result = 22940;	// pulse length less than 1,3 ms aka forward rotation
	}else if(whatToDo == 0x06 || whatToDo == 0x0A){
 242:	86 30       	cpi	r24, 0x06	; 6
 244:	59 f0       	breq	.+22     	; 0x25c <whatRight+0x22>
 246:	8a 30       	cpi	r24, 0x0A	; 10
 248:	61 f4       	brne	.+24     	; 0x262 <whatRight+0x28>
		result = 22136;	// pulse length more than 1,7 ms aka backward rotation
 24a:	88 e7       	ldi	r24, 0x78	; 120
 24c:	96 e5       	ldi	r25, 0x56	; 86
 24e:	08 95       	ret

uint16_t whatRight(uint8_t whatToDo){
	uint16_t result;
	
	if(whatToDo == 0x05 || whatToDo == 0x09){
		result = 22940;	// pulse length less than 1,3 ms aka forward rotation
 250:	8c e9       	ldi	r24, 0x9C	; 156
 252:	99 e5       	ldi	r25, 0x59	; 89
 254:	08 95       	ret
 256:	8c e9       	ldi	r24, 0x9C	; 156
 258:	99 e5       	ldi	r25, 0x59	; 89
 25a:	08 95       	ret
	}else if(whatToDo == 0x06 || whatToDo == 0x0A){
		result = 22136;	// pulse length more than 1,7 ms aka backward rotation
 25c:	88 e7       	ldi	r24, 0x78	; 120
 25e:	96 e5       	ldi	r25, 0x56	; 86
 260:	08 95       	ret
	}else{
		result = 22639;	// pulse length exactly 1,5 ms aka no motor rotation
 262:	8f e6       	ldi	r24, 0x6F	; 111
 264:	98 e5       	ldi	r25, 0x58	; 88
	}
	return result;
}
 266:	08 95       	ret

00000268 <whatLeft>:

uint16_t whatLeft(uint8_t whatToDo){//must think backwards because motor is upside down
uint16_t result2;
if(whatToDo == 0x0A || whatToDo == 0x09){
 268:	98 2f       	mov	r25, r24
 26a:	99 50       	subi	r25, 0x09	; 9
 26c:	92 30       	cpi	r25, 0x02	; 2
 26e:	30 f0       	brcs	.+12     	; 0x27c <whatLeft+0x14>
	//return 22940;
	result2 = 22945;	// pulse length less than 1,3 ms aka forward rotation
}else if(whatToDo == 0x06 || whatToDo == 0x05){
 270:	85 50       	subi	r24, 0x05	; 5
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	30 f4       	brcc	.+12     	; 0x282 <whatLeft+0x1a>
	//return 22136;
	result2 = 22141;	// pulse length more than 1,7 ms aka backward rotation
 276:	8d e7       	ldi	r24, 0x7D	; 125
 278:	96 e5       	ldi	r25, 0x56	; 86
 27a:	08 95       	ret

uint16_t whatLeft(uint8_t whatToDo){//must think backwards because motor is upside down
uint16_t result2;
if(whatToDo == 0x0A || whatToDo == 0x09){
	//return 22940;
	result2 = 22945;	// pulse length less than 1,3 ms aka forward rotation
 27c:	81 ea       	ldi	r24, 0xA1	; 161
 27e:	99 e5       	ldi	r25, 0x59	; 89
 280:	08 95       	ret
}else if(whatToDo == 0x06 || whatToDo == 0x05){
	//return 22136;
	result2 = 22141;	// pulse length more than 1,7 ms aka backward rotation
}else{
	//return 22536;
	result2 = 22725;	// pulse length exactly 1,5 ms aka no motor rotation
 282:	85 ec       	ldi	r24, 0xC5	; 197
 284:	98 e5       	ldi	r25, 0x58	; 88
}
return result2;
}
 286:	08 95       	ret

00000288 <__vector_17>:

SIGNAL(TIMER1_COMPA_vect){
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
	PORTB = PORTB & ~(0x20);	//PB5
 292:	2d 98       	cbi	0x05, 5	; 5
}
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_32>:

SIGNAL(TIMER3_COMPA_vect){
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
	PORTB = PORTB & ~(0x10);	//PB4
 2a8:	2c 98       	cbi	0x05, 4	; 5
}
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_20>:

SIGNAL(TIMER1_OVF_vect){
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	PORTB = 0x20;
 2d6:	80 e2       	ldi	r24, 0x20	; 32
 2d8:	85 b9       	out	0x05, r24	; 5
	uint16_t reading = whatLeft(whatToDo);			//PB5
 2da:	80 91 00 01 	lds	r24, 0x0100
 2de:	0e 94 34 01 	call	0x268	; 0x268 <whatLeft>
	WriteTCNT(reading, 1);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	0e 94 0e 01 	call	0x21c	; 0x21c <WriteTCNT>
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_35>:

SIGNAL(TIMER3_OVF_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	PORTB = 0x10;
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	85 b9       	out	0x05, r24	; 5
	uint16_t reading = whatRight(whatToDo);			//PB4
 330:	80 91 00 01 	lds	r24, 0x0100
 334:	0e 94 1d 01 	call	0x23a	; 0x23a <whatRight>
	WriteTCNT(reading, 3);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	0e 94 0e 01 	call	0x21c	; 0x21c <WriteTCNT>
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
