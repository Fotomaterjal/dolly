
IR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000042e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000712  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e8  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cc  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000191  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_17>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_20>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_32>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_35>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e9       	ldi	r30, 0x9A	; 154
  ac:	f3 e0       	ldi	r31, 0x03	; 3
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 30       	cpi	r26, 0x02	; 2
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ce:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <drive>:


void drive(uint8_t state){
	
	// testimiseks, et näha, mis signaali auto saab
	PORTA = state;
  d6:	82 b9       	out	0x02, r24	; 2
	if(state == OTSE){
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	21 f4       	brne	.+8      	; 0xe4 <drive+0xe>
		whatToDo = TAGASI;
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	80 93 00 01 	sts	0x0100, r24
  e2:	08 95       	ret
	}
	else if(state == VASAK){
  e4:	89 30       	cpi	r24, 0x09	; 9
  e6:	19 f4       	brne	.+6      	; 0xee <drive+0x18>
		whatToDo = VASAK;
  e8:	80 93 00 01 	sts	0x0100, r24
  ec:	08 95       	ret
	}
	else if(state == PAREM){
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	19 f4       	brne	.+6      	; 0xf8 <drive+0x22>
		whatToDo = PAREM;
  f2:	80 93 00 01 	sts	0x0100, r24
  f6:	08 95       	ret
	}
	else if(state == TAGASI){
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	21 f4       	brne	.+8      	; 0x104 <drive+0x2e>
		whatToDo = OTSE;
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	80 93 00 01 	sts	0x0100, r24
 102:	08 95       	ret
	}
	else{
		whatToDo = STOP;
 104:	10 92 00 01 	sts	0x0100, r1
		PORTA = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	82 b9       	out	0x02, r24	; 2
 10c:	08 95       	ret

0000010e <main>:
uint16_t whatRight(uint8_t whatToDo);

int main(void)
{
	//setting port b pin5 and LED-s (testing) to output
	DDRB = (1 << PB5 | 1 << PB4);
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 b9       	out	0x01, r24	; 1
	//selecting reference voltage VCC, measure voltage on pin ADC2
	//ADMUX |= (1 << REFS0 | 1 << MUX1);
	
	//TIMER1
	//initializing timer values
	TCNT1 = 0;
 116:	10 92 85 00 	sts	0x0085, r1
 11a:	10 92 84 00 	sts	0x0084, r1
	TCCR1A = 0;
 11e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 122:	e1 e8       	ldi	r30, 0x81	; 129
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	10 82       	st	Z, r1
	TCCR1C = 0;
 128:	10 92 82 00 	sts	0x0082, r1
	//setting 1 CPU clock, set normal mode for TCCR1B
	TCCR1B = (1 << CS10);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
	//loading OCR1A with 40000 to have 20ms delay between pwm pulses
	OCR1A = 25536;
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	93 e6       	ldi	r25, 0x63	; 99
 134:	90 93 89 00 	sts	0x0089, r25
 138:	80 93 88 00 	sts	0x0088, r24
	//setting TCCR1 to "non-PWM", setting OC1A low after compare match
	//TCCR1A = (1<<COM1A1);
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 6f 00 	sts	0x006F, r24
 142:	88 eb       	ldi	r24, 0xB8	; 184
 144:	9b e0       	ldi	r25, 0x0B	; 11
	
	// To unsync the timers
	for(int i = 0; i < 3000; i++){
		asm("nop");
 146:	00 00       	nop
 148:	01 97       	sbiw	r24, 0x01	; 1
	//setting TCCR1 to "non-PWM", setting OC1A low after compare match
	//TCCR1A = (1<<COM1A1);
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
	
	// To unsync the timers
	for(int i = 0; i < 3000; i++){
 14a:	e9 f7       	brne	.-6      	; 0x146 <main+0x38>
		asm("nop");
	}
	
	//TIMER3
	//initializing timer values
	TCNT3 = 0;
 14c:	10 92 95 00 	sts	0x0095, r1
 150:	10 92 94 00 	sts	0x0094, r1
	TCCR3A = 0;
 154:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
 158:	e1 e9       	ldi	r30, 0x91	; 145
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	10 82       	st	Z, r1
	TCCR3C = 0;
 15e:	10 92 92 00 	sts	0x0092, r1
	//setting CPU clock, set normal mode for TCCR1B
	TCCR3B = (1 << CS30);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
	//loading OCR1A with 40000 to have 20ms delay between pwm pulses
	OCR3A = 25536;
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	93 e6       	ldi	r25, 0x63	; 99
 16a:	90 93 99 00 	sts	0x0099, r25
 16e:	80 93 98 00 	sts	0x0098, r24
	//OCR1B = 25536;
	//setting TCCR1 to "non-PWM", setting OC1A low after compare match
	//TCCR1A = (1<<COM1A1);
	TIMSK3 = (1 << TOIE3)| (1 << OCIE1A);
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 71 00 	sts	0x0071, r24
	//WriteTCNT1(0xD6D8);

	sei();
 178:	78 94       	sei
	
	while((PINE & 0x20) == 0x20){
 17a:	05 c0       	rjmp	.+10     	; 0x186 <main+0x78>
		whatToDo = STOP;
 17c:	10 92 00 01 	sts	0x0100, r1
		drive(whatToDo);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 6b 00 	call	0xd6	; 0xd6 <drive>
	TIMSK3 = (1 << TOIE3)| (1 << OCIE1A);
	//WriteTCNT1(0xD6D8);

	sei();
	
	while((PINE & 0x20) == 0x20){
 186:	65 99       	sbic	0x0c, 5	; 12
 188:	f9 cf       	rjmp	.-14     	; 0x17c <main+0x6e>
 18a:	06 c0       	rjmp	.+12     	; 0x198 <main+0x8a>
	}
	
    while(1)
    {
		while((PINE & 0x20) == 0x20){
			whatToDo = STOP;
 18c:	10 92 00 01 	sts	0x0100, r1
			drive(whatToDo);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 6b 00 	call	0xd6	; 0xd6 <drive>
 196:	01 c0       	rjmp	.+2      	; 0x19a <main+0x8c>
		drive(whatToDo);
	}
	
    while(1)
    {
		while((PINE & 0x20) == 0x20){
 198:	da ef       	ldi	r29, 0xFA	; 250
 19a:	65 99       	sbic	0x0c, 5	; 12
 19c:	f7 cf       	rjmp	.-18     	; 0x18c <main+0x7e>
 19e:	cd 2f       	mov	r28, r29
			whatToDo = STOP;
			drive(whatToDo);
		}
		
		for(uint8_t i=0; i<250; i++){			
		if((PINE & 0x20) == 0x00){
 1a0:	65 99       	sbic	0x0c, 5	; 12
 1a2:	43 c0       	rjmp	.+134    	; 0x22a <main+0x11c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	82 e4       	ldi	r24, 0x42	; 66
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x98>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x9e>
 1ac:	a0 e1       	ldi	r26, 0x10	; 16
 1ae:	b1 e0       	ldi	r27, 0x01	; 1
 1b0:	11 97       	sbiw	r26, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xa2>
 1b4:	00 00       	nop
			_delay_us(parandus);
			
			_delay_us(pulss);
			if((PINE & 0x20) == 0x00){
 1b6:	65 99       	sbic	0x0c, 5	; 12
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0xb6>
				state += 1;
 1ba:	80 91 01 01 	lds	r24, 0x0101
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 01 01 	sts	0x0101, r24
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xba>
 1cc:	00 00       	nop
			}			
			_delay_us(pulss);
			if((PINE & 0x20) == 0x00){
 1ce:	65 99       	sbic	0x0c, 5	; 12
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <main+0xce>
				state += 2;
 1d2:	80 91 01 01 	lds	r24, 0x0101
 1d6:	8e 5f       	subi	r24, 0xFE	; 254
 1d8:	80 93 01 01 	sts	0x0101, r24
 1dc:	a0 e1       	ldi	r26, 0x10	; 16
 1de:	b1 e0       	ldi	r27, 0x01	; 1
 1e0:	11 97       	sbiw	r26, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xd2>
 1e4:	00 00       	nop
			}				
			_delay_us(pulss);
			if((PINE & 0x20) == 0x00){
 1e6:	65 99       	sbic	0x0c, 5	; 12
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <main+0xe6>
				state += 4;
 1ea:	80 91 01 01 	lds	r24, 0x0101
 1ee:	8c 5f       	subi	r24, 0xFC	; 252
 1f0:	80 93 01 01 	sts	0x0101, r24
 1f4:	80 e1       	ldi	r24, 0x10	; 16
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xea>
 1fc:	00 00       	nop
			}				
			_delay_us(pulss);
			if((PINE & 0x20) == 0x00){
 1fe:	65 99       	sbic	0x0c, 5	; 12
 200:	05 c0       	rjmp	.+10     	; 0x20c <main+0xfe>
				state += 8;
 202:	80 91 01 01 	lds	r24, 0x0101
 206:	88 5f       	subi	r24, 0xF8	; 248
 208:	80 93 01 01 	sts	0x0101, r24
			}			
			
			drive(state);
 20c:	80 91 01 01 	lds	r24, 0x0101
 210:	0e 94 6b 00 	call	0xd6	; 0xd6 <drive>
			state = 0;
 214:	10 92 01 01 	sts	0x0101, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f e9       	ldi	r24, 0x9F	; 159
 21a:	96 e8       	ldi	r25, 0x86	; 134
 21c:	a1 e0       	ldi	r26, 0x01	; 1
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	a0 40       	sbci	r26, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x110>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x11a>
 228:	00 00       	nop
 22a:	c1 50       	subi	r28, 0x01	; 1
		while((PINE & 0x20) == 0x20){
			whatToDo = STOP;
			drive(whatToDo);
		}
		
		for(uint8_t i=0; i<250; i++){			
 22c:	09 f0       	breq	.+2      	; 0x230 <main+0x122>
 22e:	b8 cf       	rjmp	.-144    	; 0x1a0 <main+0x92>
 230:	b4 cf       	rjmp	.-152    	; 0x19a <main+0x8c>

00000232 <WriteTCNT>:
	unsigned char sreg;
	//TCNT3 = 0;
	//TCNT1 = 0;
	//uint16_t i;
	/* Save global interrupt flag */
	sreg = SREG;
 232:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
 234:	f8 94       	cli
	/* Set TCNTn to i */
	if(which == 3){
 236:	63 30       	cpi	r22, 0x03	; 3
 238:	29 f4       	brne	.+10     	; 0x244 <WriteTCNT+0x12>
		TCNT3 = i;
 23a:	90 93 95 00 	sts	0x0095, r25
 23e:	80 93 94 00 	sts	0x0094, r24
 242:	04 c0       	rjmp	.+8      	; 0x24c <WriteTCNT+0x1a>
	}else{
		TCNT1 = i;
 244:	90 93 85 00 	sts	0x0085, r25
 248:	80 93 84 00 	sts	0x0084, r24
	}
	/* Restore global interrupt flag */
	SREG = sreg;
 24c:	2f bf       	out	0x3f, r18	; 63
}
 24e:	08 95       	ret

00000250 <whatRight>:

uint16_t whatRight(uint8_t whatToDo){
	uint16_t result;	
	if(whatToDo == 0x05 || whatToDo == 0x09){
 250:	85 30       	cpi	r24, 0x05	; 5
 252:	49 f0       	breq	.+18     	; 0x266 <whatRight+0x16>
 254:	89 30       	cpi	r24, 0x09	; 9
 256:	51 f0       	breq	.+20     	; 0x26c <whatRight+0x1c>
		result = 22940;	// pulse length less than 1,3 ms aka forward rotation
	}else if(whatToDo == 0x06 || whatToDo == 0x0A){
 258:	86 30       	cpi	r24, 0x06	; 6
 25a:	59 f0       	breq	.+22     	; 0x272 <whatRight+0x22>
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	61 f4       	brne	.+24     	; 0x278 <whatRight+0x28>
		result = 22136;	// pulse length more than 1,7 ms aka backward rotation
 260:	88 e7       	ldi	r24, 0x78	; 120
 262:	96 e5       	ldi	r25, 0x56	; 86
 264:	08 95       	ret
}

uint16_t whatRight(uint8_t whatToDo){
	uint16_t result;	
	if(whatToDo == 0x05 || whatToDo == 0x09){
		result = 22940;	// pulse length less than 1,3 ms aka forward rotation
 266:	8c e9       	ldi	r24, 0x9C	; 156
 268:	99 e5       	ldi	r25, 0x59	; 89
 26a:	08 95       	ret
 26c:	8c e9       	ldi	r24, 0x9C	; 156
 26e:	99 e5       	ldi	r25, 0x59	; 89
 270:	08 95       	ret
	}else if(whatToDo == 0x06 || whatToDo == 0x0A){
		result = 22136;	// pulse length more than 1,7 ms aka backward rotation
 272:	88 e7       	ldi	r24, 0x78	; 120
 274:	96 e5       	ldi	r25, 0x56	; 86
 276:	08 95       	ret
	}else{
		result = 22725;	// pulse length exactly 1,5 ms aka no motor rotation
 278:	85 ec       	ldi	r24, 0xC5	; 197
 27a:	98 e5       	ldi	r25, 0x58	; 88
	}
	return result;
}
 27c:	08 95       	ret

0000027e <whatLeft>:

uint16_t whatLeft(uint8_t whatToDo){//must think backwards because motor is upside down
	uint16_t result2;
	if(whatToDo == 0x0A || whatToDo == 0x09){
 27e:	98 2f       	mov	r25, r24
 280:	99 50       	subi	r25, 0x09	; 9
 282:	92 30       	cpi	r25, 0x02	; 2
 284:	30 f0       	brcs	.+12     	; 0x292 <whatLeft+0x14>
		//return 22940;
		result2 = 22945;	// pulse length less than 1,3 ms aka forward rotation
	}else if(whatToDo == 0x06 || whatToDo == 0x05){
 286:	85 50       	subi	r24, 0x05	; 5
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	30 f4       	brcc	.+12     	; 0x298 <whatLeft+0x1a>
		//return 22136;
		result2 = 22141;	// pulse length more than 1,7 ms aka backward rotation
 28c:	8d e7       	ldi	r24, 0x7D	; 125
 28e:	96 e5       	ldi	r25, 0x56	; 86
 290:	08 95       	ret

uint16_t whatLeft(uint8_t whatToDo){//must think backwards because motor is upside down
	uint16_t result2;
	if(whatToDo == 0x0A || whatToDo == 0x09){
		//return 22940;
		result2 = 22945;	// pulse length less than 1,3 ms aka forward rotation
 292:	81 ea       	ldi	r24, 0xA1	; 161
 294:	99 e5       	ldi	r25, 0x59	; 89
 296:	08 95       	ret
	}else if(whatToDo == 0x06 || whatToDo == 0x05){
		//return 22136;
		result2 = 22141;	// pulse length more than 1,7 ms aka backward rotation
	}else{
		//return 22536;
		result2 = 22725;	// pulse length exactly 1,5 ms aka no motor rotation
 298:	85 ec       	ldi	r24, 0xC5	; 197
 29a:	98 e5       	ldi	r25, 0x58	; 88
	}
	return result2;
}
 29c:	08 95       	ret

0000029e <__vector_17>:

SIGNAL(TIMER1_COMPA_vect){
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
	PORTB = PORTB & ~(0x20);	//PB5, put signal LOW
 2a8:	2d 98       	cbi	0x05, 5	; 5
}
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_32>:

SIGNAL(TIMER3_COMPA_vect){
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
	PORTB = PORTB & ~(0x10);	//PB4, put signal LOW
 2be:	2c 98       	cbi	0x05, 4	; 5
}
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_20>:

SIGNAL(TIMER1_OVF_vect){
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	uint16_t reading = whatLeft(whatToDo);			//PB5
 2ec:	80 91 00 01 	lds	r24, 0x0100
 2f0:	0e 94 3f 01 	call	0x27e	; 0x27e <whatLeft>
	if(reading == 22725){
 2f4:	28 e5       	ldi	r18, 0x58	; 88
 2f6:	85 3c       	cpi	r24, 0xC5	; 197
 2f8:	92 07       	cpc	r25, r18
 2fa:	21 f4       	brne	.+8      	; 0x304 <__vector_20+0x3a>
		PORTB &= ~(0x30);							//stop the car
 2fc:	25 b1       	in	r18, 0x05	; 5
 2fe:	2f 7c       	andi	r18, 0xCF	; 207
 300:	25 b9       	out	0x05, r18	; 5
 302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_20+0x3e>
	}else{
		PORTB = 0x20;								//enable car movement
 304:	20 e2       	ldi	r18, 0x20	; 32
 306:	25 b9       	out	0x05, r18	; 5
	}
		
	WriteTCNT(reading, 1);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	0e 94 19 01 	call	0x232	; 0x232 <WriteTCNT>
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_35>:

SIGNAL(TIMER3_OVF_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	uint16_t reading = whatRight(whatToDo);			//PB4
 352:	80 91 00 01 	lds	r24, 0x0100
 356:	0e 94 28 01 	call	0x250	; 0x250 <whatRight>
	if(reading == 22725){
 35a:	28 e5       	ldi	r18, 0x58	; 88
 35c:	85 3c       	cpi	r24, 0xC5	; 197
 35e:	92 07       	cpc	r25, r18
 360:	21 f4       	brne	.+8      	; 0x36a <__vector_35+0x3a>
		PORTB &= ~(0x30);							//stop the car
 362:	25 b1       	in	r18, 0x05	; 5
 364:	2f 7c       	andi	r18, 0xCF	; 207
 366:	25 b9       	out	0x05, r18	; 5
 368:	02 c0       	rjmp	.+4      	; 0x36e <__vector_35+0x3e>
	}else{
		PORTB = 0x10;								//enable car movement
 36a:	20 e1       	ldi	r18, 0x10	; 16
 36c:	25 b9       	out	0x05, r18	; 5
	}	
	
	WriteTCNT(reading, 3);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	0e 94 19 01 	call	0x232	; 0x232 <WriteTCNT>
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
