
sten_testing_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048e  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011f  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000144  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_17>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_20>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_32>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_35>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e2       	ldi	r30, 0x28	; 40
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a2 e0       	ldi	r26, 0x02	; 2
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 30       	cpi	r26, 0x02	; 2
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  ce:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:

uint16_t whatLeft(uint8_t whatToDo);
uint16_t whatRight(uint8_t whatToDo);

int main(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <main+0x6>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	

		//setting port b pin5 to output
		DDRB = (1 << PB5 | 1 << PB4);
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	20 e3       	ldi	r18, 0x30	; 48
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		
		//ADC
		//selecting reference voltage VCC, measure voltage on pin ADC2
		ADMUX |= (1 << REFS0 | 1 << MUX1);
  ea:	8c e7       	ldi	r24, 0x7C	; 124
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2c e7       	ldi	r18, 0x7C	; 124
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	22 64       	ori	r18, 0x42	; 66
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
		
		//TIMER1
		//initializing timer values
		TCNT1 = 0;
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	11 82       	std	Z+1, r1	; 0x01
 104:	10 82       	st	Z, r1
		TCCR1A = 0;
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	10 82       	st	Z, r1
		TCCR1B = 0;
 10e:	81 e8       	ldi	r24, 0x81	; 129
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	10 82       	st	Z, r1
		TCCR1C = 0;
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	10 82       	st	Z, r1
		//setting 1 CPU clock, set normal mode for TCCR1B
		TCCR1B = (1 << CS10);
 11e:	81 e8       	ldi	r24, 0x81	; 129
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
		//loading OCR1A with 40000 to have 20ms delay between pwm pulses
		OCR1A = 25536;
 128:	88 e8       	ldi	r24, 0x88	; 136
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	20 ec       	ldi	r18, 0xC0	; 192
 12e:	33 e6       	ldi	r19, 0x63	; 99
 130:	fc 01       	movw	r30, r24
 132:	31 83       	std	Z+1, r19	; 0x01
 134:	20 83       	st	Z, r18
		//OCR1B = 25536;
		//setting TCCR1 to "non-PWM", setting OC1A low after compare match
		//TCCR1A = (1<<COM1A1);
		TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
 136:	8f e6       	ldi	r24, 0x6F	; 111
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
		//WriteTCNT1(0xD6D8);
		
		for(int i = 0; i < 1000; i++){
 140:	1a 82       	std	Y+2, r1	; 0x02
 142:	19 82       	std	Y+1, r1	; 0x01
 144:	06 c0       	rjmp	.+12     	; 0x152 <main+0x7c>
			asm("nop");
 146:	00 00       	nop
		//setting TCCR1 to "non-PWM", setting OC1A low after compare match
		//TCCR1A = (1<<COM1A1);
		TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
		//WriteTCNT1(0xD6D8);
		
		for(int i = 0; i < 1000; i++){
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	f3 e0       	ldi	r31, 0x03	; 3
 158:	88 3e       	cpi	r24, 0xE8	; 232
 15a:	9f 07       	cpc	r25, r31
 15c:	a4 f3       	brlt	.-24     	; 0x146 <main+0x70>
			asm("nop");
		}
		
		//TIMER3
		//initializing timer values
		TCNT3 = 0;
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	10 82       	st	Z, r1
		TCCR3A = 0;
 168:	80 e9       	ldi	r24, 0x90	; 144
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	10 82       	st	Z, r1
		TCCR3B = 0;
 170:	81 e9       	ldi	r24, 0x91	; 145
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	10 82       	st	Z, r1
		TCCR3C = 0;
 178:	82 e9       	ldi	r24, 0x92	; 146
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
		//setting CPU clock, set normal mode for TCCR1B
		TCCR3B = (1 << CS30);
 180:	81 e9       	ldi	r24, 0x91	; 145
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
		//loading OCR1A with 40000 to have 20ms delay between pwm pulses
		OCR3A = 25536;
 18a:	88 e9       	ldi	r24, 0x98	; 152
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 ec       	ldi	r18, 0xC0	; 192
 190:	33 e6       	ldi	r19, 0x63	; 99
 192:	fc 01       	movw	r30, r24
 194:	31 83       	std	Z+1, r19	; 0x01
 196:	20 83       	st	Z, r18
		//OCR1B = 25536;
		//setting TCCR1 to "non-PWM", setting OC1A low after compare match
		//TCCR1A = (1<<COM1A1);
		TIMSK3 = (1 << TOIE3)| (1 << OCIE1A);
 198:	81 e7       	ldi	r24, 0x71	; 113
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	23 e0       	ldi	r18, 0x03	; 3
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
		//WriteTCNT1(0xD6D8);

		sei();
 1a2:	78 94       	sei
		//_delay_ms(1000);
		//whatToDo = 0x06;
		//_delay_ms(1000);
		//whatToDo = 0x09;
		//_delay_ms(1000);
    }
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0xce>

000001a6 <WriteTCNT>:
}



void WriteTCNT(uint16_t i , uint8_t which)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <WriteTCNT+0x6>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <WriteTCNT+0x8>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	9b 83       	std	Y+3, r25	; 0x03
 1b4:	8a 83       	std	Y+2, r24	; 0x02
 1b6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char sreg;
	//TCNT3 = 0;
	//TCNT1 = 0;
	//uint16_t i;
	/* Save global interrupt flag */
	sreg = SREG;
 1b8:	8f e5       	ldi	r24, 0x5F	; 95
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	89 83       	std	Y+1, r24	; 0x01
	/* Disable interrupts */
	cli();
 1c2:	f8 94       	cli
	/* Set TCNTn to i */
	if(which == 3){
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	41 f4       	brne	.+16     	; 0x1da <WriteTCNT+0x34>
		TCNT3 = i;
 1ca:	84 e9       	ldi	r24, 0x94	; 148
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	2a 81       	ldd	r18, Y+2	; 0x02
 1d0:	3b 81       	ldd	r19, Y+3	; 0x03
 1d2:	fc 01       	movw	r30, r24
 1d4:	31 83       	std	Z+1, r19	; 0x01
 1d6:	20 83       	st	Z, r18
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <WriteTCNT+0x42>
	}else{
		TCNT1 = i;	
 1da:	84 e8       	ldi	r24, 0x84	; 132
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2a 81       	ldd	r18, Y+2	; 0x02
 1e0:	3b 81       	ldd	r19, Y+3	; 0x03
 1e2:	fc 01       	movw	r30, r24
 1e4:	31 83       	std	Z+1, r19	; 0x01
 1e6:	20 83       	st	Z, r18
	}	
	/* Restore global interrupt flag */
	SREG = sreg;
 1e8:	8f e5       	ldi	r24, 0x5F	; 95
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
}
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <whatRight>:


uint16_t whatRight(uint8_t whatToDo){
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <whatRight+0x6>
 206:	0f 92       	push	r0
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result;
	
	if(whatToDo == 0x05 || whatToDo == 0x09){
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	19 f0       	breq	.+6      	; 0x21a <whatRight+0x1a>
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	89 30       	cpi	r24, 0x09	; 9
 218:	29 f4       	brne	.+10     	; 0x224 <whatRight+0x24>
		result = 22940;	// pulse length less than 1,3 ms aka forward rotation
 21a:	8c e9       	ldi	r24, 0x9C	; 156
 21c:	99 e5       	ldi	r25, 0x59	; 89
 21e:	9a 83       	std	Y+2, r25	; 0x02
 220:	89 83       	std	Y+1, r24	; 0x01
 222:	0f c0       	rjmp	.+30     	; 0x242 <whatRight+0x42>
	}else if(whatToDo == 0x06 || whatToDo == 0x0A){
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	86 30       	cpi	r24, 0x06	; 6
 228:	19 f0       	breq	.+6      	; 0x230 <whatRight+0x30>
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	8a 30       	cpi	r24, 0x0A	; 10
 22e:	29 f4       	brne	.+10     	; 0x23a <whatRight+0x3a>
		result = 22136;	// pulse length more than 1,7 ms aka backward rotation
 230:	88 e7       	ldi	r24, 0x78	; 120
 232:	96 e5       	ldi	r25, 0x56	; 86
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	04 c0       	rjmp	.+8      	; 0x242 <whatRight+0x42>
	}else{
		result = 22700;	// pulse length exactly 1,5 ms aka no motor rotation
 23a:	8c ea       	ldi	r24, 0xAC	; 172
 23c:	98 e5       	ldi	r25, 0x58	; 88
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	89 83       	std	Y+1, r24	; 0x01
	}
	return result;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
}
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <whatLeft>:

uint16_t whatLeft(uint8_t whatToDo){//must think backwards because motor is upside down
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	00 d0       	rcall	.+0      	; 0x258 <whatLeft+0x6>
 258:	0f 92       	push	r0
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result2;
	if(whatToDo == 0x0A || whatToDo == 0x09){
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	19 f0       	breq	.+6      	; 0x26c <whatLeft+0x1a>
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	89 30       	cpi	r24, 0x09	; 9
 26a:	29 f4       	brne	.+10     	; 0x276 <whatLeft+0x24>
		//return 22940;
		result2 = 22945;	// pulse length less than 1,3 ms aka forward rotation
 26c:	81 ea       	ldi	r24, 0xA1	; 161
 26e:	99 e5       	ldi	r25, 0x59	; 89
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	89 83       	std	Y+1, r24	; 0x01
 274:	0f c0       	rjmp	.+30     	; 0x294 <whatLeft+0x42>
	}else if(whatToDo == 0x06 || whatToDo == 0x05){
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	86 30       	cpi	r24, 0x06	; 6
 27a:	19 f0       	breq	.+6      	; 0x282 <whatLeft+0x30>
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	85 30       	cpi	r24, 0x05	; 5
 280:	29 f4       	brne	.+10     	; 0x28c <whatLeft+0x3a>
		//return 22136;
		result2 = 22141;	// pulse length more than 1,7 ms aka backward rotation
 282:	8d e7       	ldi	r24, 0x7D	; 125
 284:	96 e5       	ldi	r25, 0x56	; 86
 286:	9a 83       	std	Y+2, r25	; 0x02
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	04 c0       	rjmp	.+8      	; 0x294 <whatLeft+0x42>
	}else{
		//return 22536;
		result2 = 22725;	// pulse length exactly 1,5 ms aka no motor rotation
 28c:	85 ec       	ldi	r24, 0xC5	; 197
 28e:	98 e5       	ldi	r25, 0x58	; 88
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01
	}
	return result2;
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <__vector_17>:


SIGNAL(TIMER1_COMPA_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(0x20);	//PB5
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	25 e2       	ldi	r18, 0x25	; 37
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	2f 7d       	andi	r18, 0xDF	; 223
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_32>:

SIGNAL(TIMER3_COMPA_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(0x10);	//PB4
 30c:	85 e2       	ldi	r24, 0x25	; 37
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	25 e2       	ldi	r18, 0x25	; 37
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	2f 7e       	andi	r18, 0xEF	; 239
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_20>:

SIGNAL(TIMER1_OVF_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	00 d0       	rcall	.+0      	; 0x360 <__vector_20+0x28>
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x20;
 364:	85 e2       	ldi	r24, 0x25	; 37
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	20 e2       	ldi	r18, 0x20	; 32
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
	uint16_t reading = whatLeft(whatToDo);			//PB5
 36e:	80 91 00 01 	lds	r24, 0x0100
 372:	0e 94 29 01 	call	0x252	; 0x252 <whatLeft>
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
	WriteTCNT(reading, 1);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <WriteTCNT>
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_35>:

SIGNAL(TIMER3_OVF_vect){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <__vector_35+0x28>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x10;
 3da:	85 e2       	ldi	r24, 0x25	; 37
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	20 e1       	ldi	r18, 0x10	; 16
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	uint16_t reading = whatRight(whatToDo);			//PB4
 3e4:	80 91 00 01 	lds	r24, 0x0100
 3e8:	0e 94 00 01 	call	0x200	; 0x200 <whatRight>
 3ec:	9a 83       	std	Y+2, r25	; 0x02
 3ee:	89 83       	std	Y+1, r24	; 0x01
	WriteTCNT(reading, 3);		//vahemik 1,3 kuni 1,7 ms impulsi tegemiseks
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <WriteTCNT>
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
