
spear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000406  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000049e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bc  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d6  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016a  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fe  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_17>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_18>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e0       	ldi	r30, 0x06	; 6
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 30       	cpi	r26, 0x04	; 4
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a4 e0       	ldi	r26, 0x04	; 4
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ac 30       	cpi	r26, 0x0C	; 12
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 92 01 	call	0x324	; 0x324 <main>
  ce:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <SPI_MasterTransmit>:
UDR1 = send;
}

void SPI_MasterTransmit(char cData, char address)
{	
	PORTB = (0<<PB0);
  d6:	15 b8       	out	0x05, r1	; 5
	/* Start transmission */
	SPDR = address;
  d8:	6e bd       	out	0x2e, r22	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <SPI_MasterTransmit+0x4>
	
	SPDR = cData;
  e0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <SPI_MasterTransmit+0xc>
	
	PORTB = (1<<PB0);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	85 b9       	out	0x05, r24	; 5
}
  ec:	08 95       	ret

000000ee <__vector_17>:
uint8_t led2;

int16_t x;

//timer compare match interrupt
ISR(TIMER1_COMPA_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	PORTA = led1;
  fa:	80 91 08 01 	lds	r24, 0x0108
  fe:	82 b9       	out	0x02, r24	; 2
}
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_18>:
ISR(TIMER1_COMPB_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
	PORTA = led2;
 118:	80 91 0b 01 	lds	r24, 0x010B
 11c:	82 b9       	out	0x02, r24	; 2
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <getMeanMeas>:

int16_t getMeanMeas(void)
{
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	0c e2       	ldi	r16, 0x2C	; 44
 144:	11 e0       	ldi	r17, 0x01	; 1
	int16_t measurement = 0;
	int32_t meanMeas = 0;
 146:	cc 24       	eor	r12, r12
 148:	dd 24       	eor	r13, r13
 14a:	76 01       	movw	r14, r12
	
	for(uint16_t i=0; i<300; i++)
	{
		//Madala baidi pärimine
		SPI_MasterTransmit(0xFF, 0xA8);
 14c:	0f 2e       	mov	r0, r31
 14e:	fb e6       	ldi	r31, 0x6B	; 107
 150:	8f 2e       	mov	r8, r31
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	9f 2e       	mov	r9, r31
 156:	f0 2d       	mov	r31, r0
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	68 ea       	ldi	r22, 0xA8	; 168
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	f4 01       	movw	r30, r8
 162:	09 95       	icall
		measurement = SPDR;
 164:	ce b5       	in	r28, 0x2e	; 46
 166:	d0 e0       	ldi	r29, 0x00	; 0
		
		//Kõrge baidi pärimine
		SPI_MasterTransmit(0xFF, 0xA9);
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	69 ea       	ldi	r22, 0xA9	; 169
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	f4 01       	movw	r30, r8
 172:	09 95       	icall
		measurement |= SPDR<<8;
 174:	8e b5       	in	r24, 0x2e	; 46
 176:	b8 2e       	mov	r11, r24
 178:	aa 24       	eor	r10, r10
 17a:	ca 29       	or	r28, r10
 17c:	db 29       	or	r29, r11

		meanMeas += measurement;
 17e:	ce 01       	movw	r24, r28
 180:	aa 27       	eor	r26, r26
 182:	97 fd       	sbrc	r25, 7
 184:	a0 95       	com	r26
 186:	ba 2f       	mov	r27, r26
 188:	c8 0e       	add	r12, r24
 18a:	d9 1e       	adc	r13, r25
 18c:	ea 1e       	adc	r14, r26
 18e:	fb 1e       	adc	r15, r27
 190:	01 50       	subi	r16, 0x01	; 1
 192:	10 40       	sbci	r17, 0x00	; 0
int16_t getMeanMeas(void)
{
	int16_t measurement = 0;
	int32_t meanMeas = 0;
	
	for(uint16_t i=0; i<300; i++)
 194:	09 f7       	brne	.-62     	; 0x158 <getMeanMeas+0x2e>
		SPI_MasterTransmit(0xFF, 0xA9);
		measurement |= SPDR<<8;

		meanMeas += measurement;
	}
	meanMeas = meanMeas/300 + 32768; //pool resolutsioonist
 196:	c7 01       	movw	r24, r14
 198:	b6 01       	movw	r22, r12
 19a:	2c e2       	ldi	r18, 0x2C	; 44
 19c:	31 e0       	ldi	r19, 0x01	; 1
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodsi4>
 1a6:	ba 01       	movw	r22, r20
 1a8:	a9 01       	movw	r20, r18
 1aa:	40 50       	subi	r20, 0x00	; 0
 1ac:	50 48       	sbci	r21, 0x80	; 128
 1ae:	6f 4f       	sbci	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
	
	return (int16_t)meanMeas;
}
 1b2:	84 2f       	mov	r24, r20
 1b4:	95 2f       	mov	r25, r21
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	bf 90       	pop	r11
 1c8:	af 90       	pop	r10
 1ca:	9f 90       	pop	r9
 1cc:	8f 90       	pop	r8
 1ce:	08 95       	ret

000001d0 <SPI_MasterInit>:

void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB = (1<<PB2)|(1<<PB1)|(1<<PB0);
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	84 b9       	out	0x04, r24	; 4
	//PORTB = (0<<PB0);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1d4:	81 e5       	ldi	r24, 0x51	; 81
 1d6:	8c bd       	out	0x2c, r24	; 44
	
}
 1d8:	08 95       	ret

000001da <USART_init>:
void USART_init()
{
	UCSR1B = (1<<TXEN1);
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = 12;
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 cd 00 	sts	0x00CD, r25
 1ee:	80 93 cc 00 	sts	0x00CC, r24
}
 1f2:	08 95       	ret

000001f4 <USART_transmit>:

void USART_transmit(char send)
{
while(!( UCSR1A & (1<<UDRE1))){}
 1f4:	e8 ec       	ldi	r30, 0xC8	; 200
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	90 81       	ld	r25, Z
 1fa:	95 ff       	sbrs	r25, 5
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <USART_transmit+0x4>
UDR1 = send;
 1fe:	80 93 ce 00 	sts	0x00CE, r24
}
 202:	08 95       	ret

00000204 <mooda>:
	while(!(SPSR & (1<<SPIF)));
	
	PORTB = (1<<PB0);
}

uint16_t mooda(){
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
	
	tulemus = getMeanMeas();
 208:	0e 94 95 00 	call	0x12a	; 0x12a <getMeanMeas>
 20c:	f8 2f       	mov	r31, r24
 20e:	e9 2f       	mov	r30, r25
 210:	80 93 09 01 	sts	0x0109, r24
 214:	90 93 0a 01 	sts	0x010A, r25
	OCR1B = (tulemus%lahutus)*7;
 218:	c0 91 01 01 	lds	r28, 0x0101
 21c:	d0 91 02 01 	lds	r29, 0x0102
 220:	be 01       	movw	r22, r28
 222:	0e 94 b0 01 	call	0x360	; 0x360 <__udivmodhi4>
 226:	ac 01       	movw	r20, r24
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	48 1b       	sub	r20, r24
 236:	59 0b       	sbc	r21, r25
 238:	50 93 8b 00 	sts	0x008B, r21
 23c:	40 93 8a 00 	sts	0x008A, r20
	if (tulemus < lahutus){
 240:	8f 2f       	mov	r24, r31
 242:	9e 2f       	mov	r25, r30
 244:	8c 17       	cp	r24, r28
 246:	9d 07       	cpc	r25, r29
 248:	38 f4       	brcc	.+14     	; 0x258 <mooda+0x54>
			led2 = (1 << PA0);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 0b 01 	sts	0x010B, r24
			led1 = (1 << PA1);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 08 01 	sts	0x0108, r24
 256:	5f c0       	rjmp	.+190    	; 0x316 <mooda+0x112>
	}

	else if (tulemus < (lahutus*2)){
 258:	9e 01       	movw	r18, r28
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	82 17       	cp	r24, r18
 260:	93 07       	cpc	r25, r19
 262:	38 f4       	brcc	.+14     	; 0x272 <mooda+0x6e>
		
			led1 = (1 << PA2);
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 08 01 	sts	0x0108, r24
			led2 = (1 << PA1);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 0b 01 	sts	0x010B, r24
 270:	52 c0       	rjmp	.+164    	; 0x316 <mooda+0x112>
	}

	else if (tulemus <  (lahutus*3)){
 272:	9e 01       	movw	r18, r28
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	2c 0f       	add	r18, r28
 27a:	3d 1f       	adc	r19, r29
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	38 f4       	brcc	.+14     	; 0x290 <mooda+0x8c>
			led1 = (1 << PA3);
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	80 93 08 01 	sts	0x0108, r24
			led2 = (1 << PA2);
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	80 93 0b 01 	sts	0x010B, r24
 28e:	43 c0       	rjmp	.+134    	; 0x316 <mooda+0x112>
	}

	else if (tulemus < (lahutus*4)){
 290:	9e 01       	movw	r18, r28
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	82 17       	cp	r24, r18
 29c:	93 07       	cpc	r25, r19
 29e:	38 f4       	brcc	.+14     	; 0x2ae <mooda+0xaa>
		
			led2 = (1 << PA3);
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	80 93 0b 01 	sts	0x010B, r24
			led1 = (1 << PA4);
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	80 93 08 01 	sts	0x0108, r24
 2ac:	34 c0       	rjmp	.+104    	; 0x316 <mooda+0x112>
	}
	else if (tulemus < (lahutus*5)){
 2ae:	9e 01       	movw	r18, r28
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	2c 0f       	add	r18, r28
 2ba:	3d 1f       	adc	r19, r29
 2bc:	82 17       	cp	r24, r18
 2be:	93 07       	cpc	r25, r19
 2c0:	38 f4       	brcc	.+14     	; 0x2d0 <mooda+0xcc>
		
			led2 = (1 << PA4);
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	80 93 0b 01 	sts	0x010B, r24
			led1 = (1 << PA5);
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	80 93 08 01 	sts	0x0108, r24
 2ce:	23 c0       	rjmp	.+70     	; 0x316 <mooda+0x112>
	}
	else if (tulemus < (lahutus*6)){
 2d0:	9e 01       	movw	r18, r28
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	2c 0f       	add	r18, r28
 2d8:	3d 1f       	adc	r19, r29
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	82 17       	cp	r24, r18
 2e0:	93 07       	cpc	r25, r19
 2e2:	38 f4       	brcc	.+14     	; 0x2f2 <mooda+0xee>
		
			led2 = (1 << PA5);
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	80 93 0b 01 	sts	0x010B, r24
			led1 = (1 << PA6);
 2ea:	80 e4       	ldi	r24, 0x40	; 64
 2ec:	80 93 08 01 	sts	0x0108, r24
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <mooda+0x112>
	}
	else if (tulemus < (lahutus*7)){
 2f2:	9e 01       	movw	r18, r28
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	2c 1b       	sub	r18, r28
 302:	3d 0b       	sbc	r19, r29
 304:	82 17       	cp	r24, r18
 306:	93 07       	cpc	r25, r19
 308:	30 f4       	brcc	.+12     	; 0x316 <mooda+0x112>
		
			led2 = (1 << PA6);
 30a:	80 e4       	ldi	r24, 0x40	; 64
 30c:	80 93 0b 01 	sts	0x010B, r24
			led1= (1 << PA7);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	80 93 08 01 	sts	0x0108, r24
	}

	return (tulemus);

}
 316:	80 91 09 01 	lds	r24, 0x0109
 31a:	90 91 0a 01 	lds	r25, 0x010A
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <main>:

int main(void)
{
	USART_init();
 324:	0e 94 ed 00 	call	0x1da	; 0x1da <USART_init>
	SPI_MasterInit();
 328:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <SPI_MasterInit>
	SPI_MasterTransmit(0b01110111,0x20);
 32c:	87 e7       	ldi	r24, 0x77	; 119
 32e:	60 e2       	ldi	r22, 0x20	; 32
 330:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_MasterTransmit>
	
	cli();//keelan seadistamiseks katkestused
 334:	f8 94       	cli
	//TIMER
	TCCR1A = (1<<WGM10)| (1<<WGM11);
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1<<CS10)| (1<<WGM12) ;
 33c:	89 e0       	ldi	r24, 0x09	; 9
 33e:	80 93 81 00 	sts	0x0081, r24
	//enable timer interrupts
	TIMSK1 = (1<<OCIE1A) | (1<<OCIE1B);
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	80 93 6f 00 	sts	0x006F, r24
	sei();//luban katkestused peale seadistamist
 348:	78 94       	sei
	//LED PORTA
	OCR1A = 1023;
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	90 93 89 00 	sts	0x0089, r25
 352:	80 93 88 00 	sts	0x0088, r24
	DDRA = 0xFF;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	81 b9       	out	0x01, r24	; 1
	
    while(1)
    {	
		mooda();																												
 35a:	0e 94 02 01 	call	0x204	; 0x204 <mooda>
 35e:	fd cf       	rjmp	.-6      	; 0x35a <main+0x36>

00000360 <__udivmodhi4>:
 360:	aa 1b       	sub	r26, r26
 362:	bb 1b       	sub	r27, r27
 364:	51 e1       	ldi	r21, 0x11	; 17
 366:	07 c0       	rjmp	.+14     	; 0x376 <__udivmodhi4_ep>

00000368 <__udivmodhi4_loop>:
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	a6 17       	cp	r26, r22
 36e:	b7 07       	cpc	r27, r23
 370:	10 f0       	brcs	.+4      	; 0x376 <__udivmodhi4_ep>
 372:	a6 1b       	sub	r26, r22
 374:	b7 0b       	sbc	r27, r23

00000376 <__udivmodhi4_ep>:
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	5a 95       	dec	r21
 37c:	a9 f7       	brne	.-22     	; 0x368 <__udivmodhi4_loop>
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	bc 01       	movw	r22, r24
 384:	cd 01       	movw	r24, r26
 386:	08 95       	ret

00000388 <__divmodsi4>:
 388:	97 fb       	bst	r25, 7
 38a:	09 2e       	mov	r0, r25
 38c:	05 26       	eor	r0, r21
 38e:	0e d0       	rcall	.+28     	; 0x3ac <__divmodsi4_neg1>
 390:	57 fd       	sbrc	r21, 7
 392:	04 d0       	rcall	.+8      	; 0x39c <__divmodsi4_neg2>
 394:	14 d0       	rcall	.+40     	; 0x3be <__udivmodsi4>
 396:	0a d0       	rcall	.+20     	; 0x3ac <__divmodsi4_neg1>
 398:	00 1c       	adc	r0, r0
 39a:	38 f4       	brcc	.+14     	; 0x3aa <__divmodsi4_exit>

0000039c <__divmodsi4_neg2>:
 39c:	50 95       	com	r21
 39e:	40 95       	com	r20
 3a0:	30 95       	com	r19
 3a2:	21 95       	neg	r18
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	4f 4f       	sbci	r20, 0xFF	; 255
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255

000003aa <__divmodsi4_exit>:
 3aa:	08 95       	ret

000003ac <__divmodsi4_neg1>:
 3ac:	f6 f7       	brtc	.-4      	; 0x3aa <__divmodsi4_exit>
 3ae:	90 95       	com	r25
 3b0:	80 95       	com	r24
 3b2:	70 95       	com	r23
 3b4:	61 95       	neg	r22
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <__udivmodsi4>:
 3be:	a1 e2       	ldi	r26, 0x21	; 33
 3c0:	1a 2e       	mov	r1, r26
 3c2:	aa 1b       	sub	r26, r26
 3c4:	bb 1b       	sub	r27, r27
 3c6:	fd 01       	movw	r30, r26
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <__udivmodsi4_ep>

000003ca <__udivmodsi4_loop>:
 3ca:	aa 1f       	adc	r26, r26
 3cc:	bb 1f       	adc	r27, r27
 3ce:	ee 1f       	adc	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	a2 17       	cp	r26, r18
 3d4:	b3 07       	cpc	r27, r19
 3d6:	e4 07       	cpc	r30, r20
 3d8:	f5 07       	cpc	r31, r21
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__udivmodsi4_ep>
 3dc:	a2 1b       	sub	r26, r18
 3de:	b3 0b       	sbc	r27, r19
 3e0:	e4 0b       	sbc	r30, r20
 3e2:	f5 0b       	sbc	r31, r21

000003e4 <__udivmodsi4_ep>:
 3e4:	66 1f       	adc	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	1a 94       	dec	r1
 3ee:	69 f7       	brne	.-38     	; 0x3ca <__udivmodsi4_loop>
 3f0:	60 95       	com	r22
 3f2:	70 95       	com	r23
 3f4:	80 95       	com	r24
 3f6:	90 95       	com	r25
 3f8:	9b 01       	movw	r18, r22
 3fa:	ac 01       	movw	r20, r24
 3fc:	bd 01       	movw	r22, r26
 3fe:	cf 01       	movw	r24, r30
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
