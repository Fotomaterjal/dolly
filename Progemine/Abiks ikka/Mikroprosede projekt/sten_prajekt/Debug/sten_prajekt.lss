
sten_prajekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000036f  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d2  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c5  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 81 00 	call	0x102	; 0x102 <main>
  ce:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <measureVoltage>:
}


uint16_t measureVoltage(){
	//ADC enable, ADC start conversion
	ADCSRA = (1 << ADEN);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	//loop for checking ADIF flag
	while(~ADCSRA&(1 << ADIF)){
  e4:	80 81       	ld	r24, Z
  e6:	84 fd       	sbrc	r24, 4
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <measureVoltage+0x1c>
		asm("nop");
  ea:	00 00       	nop
uint16_t measureVoltage(){
	//ADC enable, ADC start conversion
	ADCSRA = (1 << ADEN);
	ADCSRA |= (1 << ADSC);
	//loop for checking ADIF flag
	while(~ADCSRA&(1 << ADIF)){
  ec:	80 81       	ld	r24, Z
  ee:	84 ff       	sbrs	r24, 4
  f0:	fc cf       	rjmp	.-8      	; 0xea <measureVoltage+0x14>
		asm("nop");
	}
	//if conversion complete, reset ADIF flag
	ADCSRA = (1 << ADIF);
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	80 93 7a 00 	sts	0x007A, r24
	return ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078
  fc:	90 91 79 00 	lds	r25, 0x0079
}
 100:	08 95       	ret

00000102 <main>:
	////setting up 8 data bits
	//UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
	////enabling transmitter
	////enabling transmitter, receiver, receive complete interrupt
	//UCSR1B = (1 << TXEN1 | 1 << RXEN1 | 1 << RXCIE1);
	sei();
 102:	78 94       	sei
	
	
	//ADC
	//selecting reference voltage VCC, measure voltage on pin ADC2
	ADMUX |= (1 << REFS0 | 1 << MUX1);
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 64       	ori	r24, 0x42	; 66
 10c:	80 83       	st	Z, r24
	
	//setting port b pin5 to output
	DDRB = (1 << PB5 | 1 << PB4);
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	84 b9       	out	0x04, r24	; 4
	
	//TIMER
	//initializing timer values
	TCCR1A = 0;
 112:	e0 e8       	ldi	r30, 0x80	; 128
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	10 82       	st	Z, r1
	TCCR1C = 0;
 118:	10 92 82 00 	sts	0x0082, r1
	//setting default clock (CPU clock), set compare match mode for TCCR1B (CTC)
	TCCR1B = (1 << CS10 | 1 << WGM12);
 11c:	89 e0       	ldi	r24, 0x09	; 9
 11e:	80 93 81 00 	sts	0x0081, r24
	//setting TCCR1 to "Fast PWM 10bit", setting OC1A low after compare match
	TCCR1A = (1<<WGM11 | 1<<WGM10 | 1<<COM1A1);	
 122:	83 e8       	ldi	r24, 0x83	; 131
 124:	80 83       	st	Z, r24
	
	//TIMER2
	//initializing timer values
	TCCR2A = 0;
 126:	e0 eb       	ldi	r30, 0xB0	; 176
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
	TCCR2B = 0;
 12c:	a1 eb       	ldi	r26, 0xB1	; 177
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	1c 92       	st	X, r1
	//setting default clock (CPU clock), set compare match mode for TCCR1B (CTC)
	TCCR2B = (1 << CS20 );
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	9c 93       	st	X, r25
	//setting TCCR1 to "Fast PWM", setting OC2A low after compare match
	TCCR2A = (1<<WGM21 | 1<<WGM20 | 1<<COM2A1);	
 136:	80 83       	st	Z, r24
	
	
	while(1)
	{
		// output compare register 1A (for PWM)
		OCR1A = measureVoltage();			//PB5
 138:	c8 e8       	ldi	r28, 0x88	; 136
 13a:	d0 e0       	ldi	r29, 0x00	; 0
		//UDR1 = OCR1A;
		OCR2A =	high(measureVoltage());		//PB4
 13c:	03 eb       	ldi	r16, 0xB3	; 179
 13e:	10 e0       	ldi	r17, 0x00	; 0
	
	
	while(1)
	{
		// output compare register 1A (for PWM)
		OCR1A = measureVoltage();			//PB5
 140:	0e 94 6b 00 	call	0xd6	; 0xd6 <measureVoltage>
 144:	99 83       	std	Y+1, r25	; 0x01
 146:	88 83       	st	Y, r24
		//UDR1 = OCR1A;
		OCR2A =	high(measureVoltage());		//PB4
 148:	0e 94 6b 00 	call	0xd6	; 0xd6 <measureVoltage>
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	96 95       	lsr	r25
 152:	87 95       	ror	r24
 154:	f8 01       	movw	r30, r16
 156:	80 83       	st	Z, r24
 158:	f3 cf       	rjmp	.-26     	; 0x140 <main+0x3e>

0000015a <WriteTCNT1>:
void WriteTCNT1(uint16_t i )
{
	unsigned char sreg;
	//uint16_t i;
	/* Save global interrupt flag */
	sreg = SREG;
 15a:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
 15c:	f8 94       	cli
	/* Set TCNTn to i */
	TCNT1 = i;
 15e:	90 93 85 00 	sts	0x0085, r25
 162:	80 93 84 00 	sts	0x0084, r24
	/* Restore global interrupt flag */
	SREG = sreg;
 166:	2f bf       	out	0x3f, r18	; 63
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
