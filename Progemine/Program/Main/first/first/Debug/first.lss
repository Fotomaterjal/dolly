
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000044e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800102  00800102  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d6  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000211  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027e  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000544  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_17>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e4       	ldi	r30, 0x4E	; 78
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 35       	cpi	r26, 0x54	; 84
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  e2:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <USARTgetWord>:
}


uint16_t USARTgetWord(){
	uint16_t receivedWord = 0;		//init variable	
	while(!(UCSR1A & (1<<RXC1)));	//while receive not complete
  ea:	e8 ec       	ldi	r30, 0xC8	; 200
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <USARTgetWord+0x4>
	receivedWord = (UDR1<<8);		//fill the high byte	
  f4:	80 91 ce 00 	lds	r24, 0x00CE
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 2f       	mov	r25, r24
  fc:	88 27       	eor	r24, r24
	while(!(UCSR1A & (1<<RXC1)));	//while receive not complete
  fe:	e8 ec       	ldi	r30, 0xC8	; 200
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	20 81       	ld	r18, Z
 104:	22 23       	and	r18, r18
 106:	ec f7       	brge	.-6      	; 0x102 <USARTgetWord+0x18>
	receivedWord |= (UDR1);			//fill the low byte
 108:	20 91 ce 00 	lds	r18, 0x00CE
		
	return receivedWord;
}
 10c:	82 2b       	or	r24, r18
 10e:	08 95       	ret

00000110 <init_Timer1>:

void init_Timer1(){	
	// setting CPU clock/1024
	// 1s = 15625 cycles
	TCCR1B = (1<<CS12 | 1<<CS10 | 1<<WGM12); // enable CTC
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	80 93 81 00 	sts	0x0081, r24
	// set CTC value
	OCR1A = OCR1A_value;	
 116:	80 91 02 01 	lds	r24, 0x0102
 11a:	90 91 03 01 	lds	r25, 0x0103
 11e:	90 93 89 00 	sts	0x0089, r25
 122:	80 93 88 00 	sts	0x0088, r24
	// enable Timer Overflow Interrupt
	TIMSK1 |= (1<<OCIE1A);
 126:	ef e6       	ldi	r30, 0x6F	; 111
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	// Global Interrupt enable
	SREG |= (1<<7);	
 130:	8f b7       	in	r24, 0x3f	; 63
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8f bf       	out	0x3f, r24	; 63
 136:	08 95       	ret

00000138 <setCurrentLimiter_T4>:

// current limit set, TIMER4 PWM
// I_tripMax = V_ref/(8*R_s), R_s = 0.1 Ohm
// 200 mA = V_ref/0.8 -> V_ref = 0.16V = 3.2% uptime -> OCR4D = 8
void setCurrentLimiter_T4(int ocr_value){
	DDRD |= (1<<PD7);					//OCR4D to output
 138:	57 9a       	sbi	0x0a, 7	; 10
	OCR4D = ocr_value;					// set count limit
 13a:	80 93 d2 00 	sts	0x00D2, r24
	TCCR4C |= (1<<COM4D1)|(1<<PWM4D);	// set fast PWM mode - clear on CM, enable PWM @ OCR4D
 13e:	e2 ec       	ldi	r30, 0xC2	; 194
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	89 60       	ori	r24, 0x09	; 9
 146:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);				// set CPU clock for timer clock
 148:	e1 ec       	ldi	r30, 0xC1	; 193
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	TCNT4 = 0x000;						// init count
 152:	10 92 bf 00 	sts	0x00BF, r1
 156:	10 92 be 00 	sts	0x00BE, r1
 15a:	08 95       	ret

0000015c <init_UART>:
}

void init_UART(){
	// UART
	// setting baud rate to 9600
	UBRR1 = 207;
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 cd 00 	sts	0x00CD, r25
 164:	80 93 cc 00 	sts	0x00CC, r24
	// setting up double speed mode
	UCSR1A = (1 << U2X1);	
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 c8 00 	sts	0x00C8, r24
	// set up 8 data bits
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
 16e:	ea ec       	ldi	r30, 0xCA	; 202
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	86 60       	ori	r24, 0x06	; 6
 176:	80 83       	st	Z, r24
	// enable transmitter, receiever, receive complete interrupt
	UCSR1B |= (1<<TXEN1 | 1 << RXEN1 | 1 << RXCIE1);
 178:	e9 ec       	ldi	r30, 0xC9	; 201
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 69       	ori	r24, 0x98	; 152
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <sendLetter>:
	
}

void sendLetter(uint8_t letter){
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 184:	e8 ec       	ldi	r30, 0xC8	; 200
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	95 ff       	sbrs	r25, 5
 18c:	fd cf       	rjmp	.-6      	; 0x188 <sendLetter+0x4>
	// else load value to UART sending register
	UDR1 = letter;
 18e:	80 93 ce 00 	sts	0x00CE, r24
 192:	08 95       	ret

00000194 <readKeyframe>:
		//sendLetter(0xFF);
    }
	
}

struct keyFrame readKeyframe(uint8_t bytes){
 194:	8f 92       	push	r8
 196:	9f 92       	push	r9
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	28 97       	sbiw	r28, 0x08	; 8
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	01 e0       	ldi	r16, 0x01	; 1
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <readKeyframe+0x32>
 1c2:	0f 5f       	subi	r16, 0xFF	; 255
 1c4:	1f 4f       	sbci	r17, 0xFF	; 255
	struct keyFrame receivedKeyframe;
	for(int i=0; i<4; i++){	
		sendLetter('a');	
 1c6:	81 e6       	ldi	r24, 0x61	; 97
 1c8:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
 1cc:	f8 01       	movw	r30, r16
 1ce:	31 97       	sbiw	r30, 0x01	; 1
		
		switch(i){
 1d0:	e1 30       	cpi	r30, 0x01	; 1
 1d2:	f1 05       	cpc	r31, r1
 1d4:	91 f0       	breq	.+36     	; 0x1fa <readKeyframe+0x66>
 1d6:	1c f4       	brge	.+6      	; 0x1de <readKeyframe+0x4a>
 1d8:	ef 2b       	or	r30, r31
 1da:	39 f0       	breq	.+14     	; 0x1ea <readKeyframe+0x56>
 1dc:	26 c0       	rjmp	.+76     	; 0x22a <readKeyframe+0x96>
 1de:	e2 30       	cpi	r30, 0x02	; 2
 1e0:	f1 05       	cpc	r31, r1
 1e2:	99 f0       	breq	.+38     	; 0x20a <readKeyframe+0x76>
 1e4:	33 97       	sbiw	r30, 0x03	; 3
 1e6:	c9 f0       	breq	.+50     	; 0x21a <readKeyframe+0x86>
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <readKeyframe+0x96>
			case 0:
				sendLetter('b');
 1ea:	82 e6       	ldi	r24, 0x62	; 98
 1ec:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
				receivedKeyframe.distance = USARTgetWord();
 1f0:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 1f4:	c8 2e       	mov	r12, r24
 1f6:	89 2e       	mov	r8, r25
				break;
 1f8:	e4 cf       	rjmp	.-56     	; 0x1c2 <readKeyframe+0x2e>
			case 1:
				sendLetter('c');
 1fa:	83 e6       	ldi	r24, 0x63	; 99
 1fc:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
				receivedKeyframe.horDeg = USARTgetWord();
 200:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 204:	d8 2e       	mov	r13, r24
 206:	99 2e       	mov	r9, r25
				break;
 208:	dc cf       	rjmp	.-72     	; 0x1c2 <readKeyframe+0x2e>
			case 2:
				sendLetter('d');				
 20a:	84 e6       	ldi	r24, 0x64	; 100
 20c:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
				receivedKeyframe.vertDeg = USARTgetWord();
 210:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 214:	e8 2e       	mov	r14, r24
 216:	a9 2e       	mov	r10, r25
				break;
 218:	d4 cf       	rjmp	.-88     	; 0x1c2 <readKeyframe+0x2e>
			case 3:
				sendLetter('e');				
 21a:	85 e6       	ldi	r24, 0x65	; 101
 21c:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
				receivedKeyframe.timeStamp = USARTgetWord();				
 220:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 224:	f8 2e       	mov	r15, r24
 226:	b9 2e       	mov	r11, r25
 228:	03 c0       	rjmp	.+6      	; 0x230 <readKeyframe+0x9c>
	
}

struct keyFrame readKeyframe(uint8_t bytes){
	struct keyFrame receivedKeyframe;
	for(int i=0; i<4; i++){	
 22a:	04 30       	cpi	r16, 0x04	; 4
 22c:	11 05       	cpc	r17, r1
 22e:	4c f2       	brlt	.-110    	; 0x1c2 <readKeyframe+0x2e>
				sendLetter('e');				
				receivedKeyframe.timeStamp = USARTgetWord();				
				break;
		}
	}
	sendLetter('f');	
 230:	86 e6       	ldi	r24, 0x66	; 102
 232:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
	return receivedKeyframe;
 236:	c9 82       	std	Y+1, r12	; 0x01
 238:	8a 82       	std	Y+2, r8	; 0x02
 23a:	db 82       	std	Y+3, r13	; 0x03
 23c:	9c 82       	std	Y+4, r9	; 0x04
 23e:	ed 82       	std	Y+5, r14	; 0x05
 240:	ae 82       	std	Y+6, r10	; 0x06
 242:	ff 82       	std	Y+7, r15	; 0x07
 244:	b8 86       	std	Y+8, r11	; 0x08
 246:	2c 2d       	mov	r18, r12
 248:	38 2d       	mov	r19, r8
 24a:	4d 2d       	mov	r20, r13
 24c:	59 2d       	mov	r21, r9
 24e:	6e 2d       	mov	r22, r14
 250:	7a 2d       	mov	r23, r10
}
 252:	8f 2d       	mov	r24, r15
 254:	9b 2d       	mov	r25, r11
 256:	28 96       	adiw	r28, 0x08	; 8
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <sendWord>:
	UDR1 = letter;
}

void sendWord(uint16_t word){
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 27c:	e8 ec       	ldi	r30, 0xC8	; 200
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	20 81       	ld	r18, Z
 282:	25 ff       	sbrs	r18, 5
 284:	fd cf       	rjmp	.-6      	; 0x280 <sendWord+0x4>
	// else load value to UART sending register
	UDR1 = (word>>8) & 0xFF;
 286:	90 93 ce 00 	sts	0x00CE, r25
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 28a:	e8 ec       	ldi	r30, 0xC8	; 200
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	90 81       	ld	r25, Z
 290:	95 ff       	sbrs	r25, 5
 292:	fd cf       	rjmp	.-6      	; 0x28e <sendWord+0x12>
	// else load value to UART sending register
	UDR1 = word;
 294:	80 93 ce 00 	sts	0x00CE, r24
 298:	08 95       	ret

0000029a <rmCLKDIV8>:
	}
}

void rmCLKDIV8(){
	// Remove CLKDIV8
	CLKPR = 0x80;
 29a:	e1 e6       	ldi	r30, 0x61	; 97
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2a2:	10 82       	st	Z, r1
 2a4:	08 95       	ret

000002a6 <init_steppers>:
}

void init_steppers(){
	// STEP2 (bottom stepper) is PB5
	DDRB |= (1 << PB5);
 2a6:	25 9a       	sbi	0x04, 5	; 4
	// DIR2
	DDRB |= (1 << PB4);
 2a8:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PB4);
 2aa:	2c 9a       	sbi	0x05, 4	; 5
	// STEP3 (middle stepper) is PC6
	DDRC |= (1 << PC6);
 2ac:	3e 9a       	sbi	0x07, 6	; 7
	// STEP1 (upper stepper) is PB6
	DDRB |= (1 << PB6);
 2ae:	26 9a       	sbi	0x04, 6	; 4
	// Change upper stepper DIR
	DDRD |= (1 << PD1);
 2b0:	51 9a       	sbi	0x0a, 1	; 10
 2b2:	08 95       	ret

000002b4 <main>:
struct keyFrame keyframes[10];


int main(void){

	rmCLKDIV8();
 2b4:	0e 94 4d 01 	call	0x29a	; 0x29a <rmCLKDIV8>
	SREG |= (1<<7);	
}

// get OSCR1A value for required frequency
int getOSCR1A(int freq){
	return (F_CPU/CKDIV_16/freq);	
 2b8:	20 91 00 01 	lds	r18, 0x0100
 2bc:	30 91 01 01 	lds	r19, 0x0101
 2c0:	44 27       	eor	r20, r20
 2c2:	37 fd       	sbrc	r19, 7
 2c4:	40 95       	com	r20
 2c6:	54 2f       	mov	r21, r20
 2c8:	69 e0       	ldi	r22, 0x09	; 9
 2ca:	7d e3       	ldi	r23, 0x3D	; 61
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divmodsi4>
 2d4:	30 93 03 01 	sts	0x0103, r19
 2d8:	20 93 02 01 	sts	0x0102, r18
	////////////// Blinking LED freq //////////////////////
	// get compare match value for timer 1
	OCR1A_value = getOSCR1A(freq1);
	// debug LED to output
	int led = 0x20;
	DDRD |= led;
 2dc:	55 9a       	sbi	0x0a, 5	; 10
	
	////////////// Init Stepper CurrentLimit & DDRs ///////
	cli();
 2de:	f8 94       	cli
	init_Timer1();
 2e0:	0e 94 88 00 	call	0x110	; 0x110 <init_Timer1>
	// !!!TEST WITH POWER SUPPLY!!!
	setCurrentLimiter_T4(8);	// 3,2% duty cycle
 2e4:	88 e0       	ldi	r24, 0x08	; 8
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 9c 00 	call	0x138	; 0x138 <setCurrentLimiter_T4>
	init_steppers();
 2ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <init_steppers>
	sei();
 2f0:	78 94       	sei
	
	////////////// UART testing //////////////////////////
	char str[] = "JOUJOU";
	init_UART();		
 2f2:	0e 94 ae 00 	call	0x15c	; 0x15c <init_UART>
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main+0x42>

000002f8 <__vector_17>:
	//PORTB |= (1 << PB0) | (1 << PB1);
	
	
}

SIGNAL(TIMER1_COMPA_vect){
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	TCNT1 = 0x0000;
 306:	10 92 85 00 	sts	0x0085, r1
 30a:	10 92 84 00 	sts	0x0084, r1
	//PD5 = DEBUG_LED
	PORTD = PORTD^(1<<PD5);	// invert LED value
 30e:	9b b1       	in	r25, 0x0b	; 11
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	89 27       	eor	r24, r25
 314:	8b b9       	out	0x0b, r24	; 11
	//asm("NOP");

	//TEST WITHH POWER SUPPLY
	//PB6 = STEP1
	//PORTD ^= (1 << PD1);
	PORTB = PORTB^(1<<PB6);
 316:	95 b1       	in	r25, 0x05	; 5
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	89 27       	eor	r24, r25
 31c:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 31e:	00 00       	nop
	asm("NOP");
 320:	00 00       	nop
	asm("NOP");
 322:	00 00       	nop
	PORTB = PORTB^(1<<PB6);
 324:	95 b1       	in	r25, 0x05	; 5
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	89 27       	eor	r24, r25
 32a:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 32c:	00 00       	nop
	asm("NOP");
 32e:	00 00       	nop
	asm("NOP");
 330:	00 00       	nop
}
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_25>:

SIGNAL(USART1_RX_vect){
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	cf 93       	push	r28
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	cli();
 364:	f8 94       	cli
	//PORTD = PORTD^(1<<PD5);	// invert LED value
	
	uint8_t firstBit = UDR1;
 366:	c0 91 ce 00 	lds	r28, 0x00CE
	//freq1 = (a-0x30)*10;
	//OCR1A = getOSCR1A(freq1);
	sendLetter(firstBit);
 36a:	8c 2f       	mov	r24, r28
 36c:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
	//asm("nop");
	
	if(firstBit == 'k'){	//gonna be receiving a keyframe, aka four 16bit numbers
 370:	cb 36       	cpi	r28, 0x6B	; 107
 372:	b9 f4       	brne	.+46     	; 0x3a2 <__vector_25+0x62>
		//sendWord(1200);
		sendLetter('s');
 374:	83 e7       	ldi	r24, 0x73	; 115
 376:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
		keyframes[0] = readKeyframe(2);
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 ca 00 	call	0x194	; 0x194 <readKeyframe>
 380:	e4 e0       	ldi	r30, 0x04	; 4
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	20 83       	st	Z, r18
 386:	31 83       	std	Z+1, r19	; 0x01
 388:	42 83       	std	Z+2, r20	; 0x02
 38a:	53 83       	std	Z+3, r21	; 0x03
 38c:	64 83       	std	Z+4, r22	; 0x04
 38e:	75 83       	std	Z+5, r23	; 0x05
 390:	86 83       	std	Z+6, r24	; 0x06
 392:	97 83       	std	Z+7, r25	; 0x07
		//sendWord(1200);
		sendWord(keyframes[0].distance);
 394:	80 81       	ld	r24, Z
 396:	91 81       	ldd	r25, Z+1	; 0x01
 398:	0e 94 3e 01 	call	0x27c	; 0x27c <sendWord>
		//sendWord(USARTgetWord());
		sendLetter('x');
 39c:	88 e7       	ldi	r24, 0x78	; 120
 39e:	0e 94 c2 00 	call	0x184	; 0x184 <sendLetter>
	}
	sei();
 3a2:	78 94       	sei
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	cf 91       	pop	r28
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__divmodsi4>:
 3c8:	05 2e       	mov	r0, r21
 3ca:	97 fb       	bst	r25, 7
 3cc:	1e f4       	brtc	.+6      	; 0x3d4 <__divmodsi4+0xc>
 3ce:	00 94       	com	r0
 3d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__negsi2>
 3d4:	57 fd       	sbrc	r21, 7
 3d6:	07 d0       	rcall	.+14     	; 0x3e6 <__divmodsi4_neg2>
 3d8:	0e 94 03 02 	call	0x406	; 0x406 <__udivmodsi4>
 3dc:	07 fc       	sbrc	r0, 7
 3de:	03 d0       	rcall	.+6      	; 0x3e6 <__divmodsi4_neg2>
 3e0:	4e f4       	brtc	.+18     	; 0x3f4 <__divmodsi4_exit>
 3e2:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__negsi2>

000003e6 <__divmodsi4_neg2>:
 3e6:	50 95       	com	r21
 3e8:	40 95       	com	r20
 3ea:	30 95       	com	r19
 3ec:	21 95       	neg	r18
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	4f 4f       	sbci	r20, 0xFF	; 255
 3f2:	5f 4f       	sbci	r21, 0xFF	; 255

000003f4 <__divmodsi4_exit>:
 3f4:	08 95       	ret

000003f6 <__negsi2>:
 3f6:	90 95       	com	r25
 3f8:	80 95       	com	r24
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	08 95       	ret

00000406 <__udivmodsi4>:
 406:	a1 e2       	ldi	r26, 0x21	; 33
 408:	1a 2e       	mov	r1, r26
 40a:	aa 1b       	sub	r26, r26
 40c:	bb 1b       	sub	r27, r27
 40e:	fd 01       	movw	r30, r26
 410:	0d c0       	rjmp	.+26     	; 0x42c <__udivmodsi4_ep>

00000412 <__udivmodsi4_loop>:
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	ee 1f       	adc	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	a2 17       	cp	r26, r18
 41c:	b3 07       	cpc	r27, r19
 41e:	e4 07       	cpc	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	20 f0       	brcs	.+8      	; 0x42c <__udivmodsi4_ep>
 424:	a2 1b       	sub	r26, r18
 426:	b3 0b       	sbc	r27, r19
 428:	e4 0b       	sbc	r30, r20
 42a:	f5 0b       	sbc	r31, r21

0000042c <__udivmodsi4_ep>:
 42c:	66 1f       	adc	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	1a 94       	dec	r1
 436:	69 f7       	brne	.-38     	; 0x412 <__udivmodsi4_loop>
 438:	60 95       	com	r22
 43a:	70 95       	com	r23
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	9b 01       	movw	r18, r22
 442:	ac 01       	movw	r20, r24
 444:	bd 01       	movw	r22, r26
 446:	cf 01       	movw	r24, r30
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
