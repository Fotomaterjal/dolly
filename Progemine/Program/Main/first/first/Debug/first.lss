
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000025c  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a5  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000158  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d4  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_17>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e3       	ldi	r30, 0x3C	; 60
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 30       	cpi	r26, 0x06	; 6
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  e2:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <init_Timer1>:


void init_Timer1(){	
	// setting CPU clock/1024
	// 1s = 15625 cycles
	TCCR1B = (1<<CS12 | 1<<CS10 | 1<<WGM12); // enable CTC
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 93 81 00 	sts	0x0081, r24
	// set CTC value
	OCR1A = OCR1A_value;	
  f0:	80 91 02 01 	lds	r24, 0x0102
  f4:	90 91 03 01 	lds	r25, 0x0103
  f8:	90 93 89 00 	sts	0x0089, r25
  fc:	80 93 88 00 	sts	0x0088, r24
	// enable Timer Overflow Interrupt
	TIMSK1 |= (1<<OCIE1A);
 100:	ef e6       	ldi	r30, 0x6F	; 111
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	// Global Interrupt enable
	SREG |= (1<<7);	
 10a:	8f b7       	in	r24, 0x3f	; 63
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8f bf       	out	0x3f, r24	; 63
 110:	08 95       	ret

00000112 <__vector_17>:
// get OSCR1A value for required frequency
int getOSCR1A(int freq){
	return (F_CPU/CKDIV_16/freq);	
}

SIGNAL(TIMER1_COMPA_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	TCNT1 = 0x0000;
 120:	10 92 85 00 	sts	0x0085, r1
 124:	10 92 84 00 	sts	0x0084, r1
	//PD5 = DEBUG_LED
	PORTD = PORTD^(1<<PD5);	// invert LED value
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	98 27       	eor	r25, r24
 12e:	9b b9       	out	0x0b, r25	; 11
	//Step on step2 (PB5)
	//TEST WITHH POWER SUPPLY
	//PB5 = STEP2
	PORTB = PORTB^(1<<PB5);
 130:	95 b1       	in	r25, 0x05	; 5
 132:	89 27       	eor	r24, r25
 134:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 136:	00 00       	nop
	PORTB = PORTB^(1<<PB5);	
 138:	95 b1       	in	r25, 0x05	; 5
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	89 27       	eor	r24, r25
 13e:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 140:	00 00       	nop
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <setCurrentLimiter_T4>:

// current limit set, TIMER4 PWM
// I_tripMax = V_ref/(8*R_s), R_s = 0.1 Ohm
// 200 mA = V_ref/0.8 -> V_ref = 0.16V = 3.2% uptime -> OCR4D = 8
void setCurrentLimiter_T4(int ocr_value){
	DDRD |= (1<<PD7);					//OCR4D to output
 150:	57 9a       	sbi	0x0a, 7	; 10
	OCR4D = ocr_value;					// set count limit
 152:	80 93 d2 00 	sts	0x00D2, r24
	TCCR4C |= (1<<COM4D1)|(1<<PWM4D);	// set fast PWM mode - clear on CM, enable PWM @ OCR4D
 156:	e2 ec       	ldi	r30, 0xC2	; 194
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	89 60       	ori	r24, 0x09	; 9
 15e:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);				// set CPU clock for timer clock
 160:	e1 ec       	ldi	r30, 0xC1	; 193
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	TCNT4 = 0x000;						// init count
 16a:	10 92 bf 00 	sts	0x00BF, r1
 16e:	10 92 be 00 	sts	0x00BE, r1
 172:	08 95       	ret

00000174 <main>:



int main(void){
	// Remove CLKDIV8
	CLKPR = 0x80;
 174:	e1 e6       	ldi	r30, 0x61	; 97
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 17c:	10 82       	st	Z, r1
	SREG |= (1<<7);	
}

// get OSCR1A value for required frequency
int getOSCR1A(int freq){
	return (F_CPU/CKDIV_16/freq);	
 17e:	20 91 00 01 	lds	r18, 0x0100
 182:	30 91 01 01 	lds	r19, 0x0101
 186:	44 27       	eor	r20, r20
 188:	37 fd       	sbrc	r19, 7
 18a:	40 95       	com	r20
 18c:	54 2f       	mov	r21, r20
 18e:	69 e0       	ldi	r22, 0x09	; 9
 190:	7d e3       	ldi	r23, 0x3D	; 61
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__divmodsi4>
 19a:	30 93 03 01 	sts	0x0103, r19
 19e:	20 93 02 01 	sts	0x0102, r18
	CLKPR = 0x80;
	CLKPR = 0x00;
	// get compare match value for timer 1
	OCR1A_value = getOSCR1A(freq1);
	
	cli();
 1a2:	f8 94       	cli
	init_Timer1();
 1a4:	0e 94 75 00 	call	0xea	; 0xea <init_Timer1>
	//TEST WITH POWER SUPPLY
	setCurrentLimiter_T4(8);	// 3,2% duty cycle
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 a8 00 	call	0x150	; 0x150 <setCurrentLimiter_T4>
	sei();
 1b0:	78 94       	sei
	
	char str[] = "JOUJOU";
	
	// debug LED to output
	int led = 0x20;
	DDRD |= led;	
 1b2:	55 9a       	sbi	0x0a, 5	; 10
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x40>

000001b6 <__divmodsi4>:
 1b6:	05 2e       	mov	r0, r21
 1b8:	97 fb       	bst	r25, 7
 1ba:	1e f4       	brtc	.+6      	; 0x1c2 <__divmodsi4+0xc>
 1bc:	00 94       	com	r0
 1be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__negsi2>
 1c2:	57 fd       	sbrc	r21, 7
 1c4:	07 d0       	rcall	.+14     	; 0x1d4 <__divmodsi4_neg2>
 1c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__udivmodsi4>
 1ca:	07 fc       	sbrc	r0, 7
 1cc:	03 d0       	rcall	.+6      	; 0x1d4 <__divmodsi4_neg2>
 1ce:	4e f4       	brtc	.+18     	; 0x1e2 <__divmodsi4_exit>
 1d0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__negsi2>

000001d4 <__divmodsi4_neg2>:
 1d4:	50 95       	com	r21
 1d6:	40 95       	com	r20
 1d8:	30 95       	com	r19
 1da:	21 95       	neg	r18
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	4f 4f       	sbci	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255

000001e2 <__divmodsi4_exit>:
 1e2:	08 95       	ret

000001e4 <__negsi2>:
 1e4:	90 95       	com	r25
 1e6:	80 95       	com	r24
 1e8:	70 95       	com	r23
 1ea:	61 95       	neg	r22
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	08 95       	ret

000001f4 <__udivmodsi4>:
 1f4:	a1 e2       	ldi	r26, 0x21	; 33
 1f6:	1a 2e       	mov	r1, r26
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	fd 01       	movw	r30, r26
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <__udivmodsi4_ep>

00000200 <__udivmodsi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	ee 1f       	adc	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	a2 17       	cp	r26, r18
 20a:	b3 07       	cpc	r27, r19
 20c:	e4 07       	cpc	r30, r20
 20e:	f5 07       	cpc	r31, r21
 210:	20 f0       	brcs	.+8      	; 0x21a <__udivmodsi4_ep>
 212:	a2 1b       	sub	r26, r18
 214:	b3 0b       	sbc	r27, r19
 216:	e4 0b       	sbc	r30, r20
 218:	f5 0b       	sbc	r31, r21

0000021a <__udivmodsi4_ep>:
 21a:	66 1f       	adc	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	1a 94       	dec	r1
 224:	69 f7       	brne	.-38     	; 0x200 <__udivmodsi4_loop>
 226:	60 95       	com	r22
 228:	70 95       	com	r23
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	9b 01       	movw	r18, r22
 230:	ac 01       	movw	r20, r24
 232:	bd 01       	movw	r22, r26
 234:	cf 01       	movw	r24, r30
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
