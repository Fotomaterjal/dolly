
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800102  00800102  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004cc  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b0  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a2  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_17>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e8       	ldi	r30, 0x8E	; 142
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 35       	cpi	r26, 0x54	; 84
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  e2:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <USARTgetWord>:

uint16_t USARTgetWord(){
	uint8_t receivedByte;
	uint16_t receivedWord = 0;		//init variable	
	
	while(!(UCSR1A & (1<<RXC1)));	//while receive not complete
  ea:	e8 ec       	ldi	r30, 0xC8	; 200
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <USARTgetWord+0x4>
	receivedByte = UDR1;
  f4:	80 91 ce 00 	lds	r24, 0x00CE
	receivedWord = (receivedByte<<8);		//fill the high byte	
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 2f       	mov	r25, r24
  fc:	88 27       	eor	r24, r24
	//sendLetter('h');
	//sendLetter(receivedByte);
	asm("nop");
  fe:	00 00       	nop
	asm("nop");
 100:	00 00       	nop
	while(!(UCSR1A & (1<<RXC1)));	//while receive not complete
 102:	e8 ec       	ldi	r30, 0xC8	; 200
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 81       	ld	r18, Z
 108:	22 23       	and	r18, r18
 10a:	ec f7       	brge	.-6      	; 0x106 <USARTgetWord+0x1c>
	receivedByte = UDR1;
 10c:	20 91 ce 00 	lds	r18, 0x00CE
	receivedWord |= receivedByte;			//fill the low byte
	//sendLetter('i');
	//sendLetter(receivedByte);	
	return receivedWord;
}
 110:	82 2b       	or	r24, r18
 112:	08 95       	ret

00000114 <readKeyframe>:
		//sendLetter(0xFF);
    }
	
}

struct keyFrame readKeyframe(uint8_t bytes){
 114:	8f 92       	push	r8
 116:	9f 92       	push	r9
 118:	af 92       	push	r10
 11a:	bf 92       	push	r11
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	28 97       	sbiw	r28, 0x08	; 8
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	01 e0       	ldi	r16, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <readKeyframe+0x32>
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	f8 01       	movw	r30, r16
 148:	31 97       	sbiw	r30, 0x01	; 1
	struct keyFrame receivedKeyframe;
	for(int i=0; i<4; i++){	
		//sendLetter('a');	
		
		switch(i){
 14a:	e1 30       	cpi	r30, 0x01	; 1
 14c:	f1 05       	cpc	r31, r1
 14e:	79 f0       	breq	.+30     	; 0x16e <readKeyframe+0x5a>
 150:	1c f4       	brge	.+6      	; 0x158 <readKeyframe+0x44>
 152:	ef 2b       	or	r30, r31
 154:	39 f0       	breq	.+14     	; 0x164 <readKeyframe+0x50>
 156:	1a c0       	rjmp	.+52     	; 0x18c <readKeyframe+0x78>
 158:	e2 30       	cpi	r30, 0x02	; 2
 15a:	f1 05       	cpc	r31, r1
 15c:	69 f0       	breq	.+26     	; 0x178 <readKeyframe+0x64>
 15e:	33 97       	sbiw	r30, 0x03	; 3
 160:	81 f0       	breq	.+32     	; 0x182 <readKeyframe+0x6e>
 162:	14 c0       	rjmp	.+40     	; 0x18c <readKeyframe+0x78>
			case 0:
				//sendLetter('b');
				receivedKeyframe.distance = USARTgetWord();
 164:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 168:	c8 2e       	mov	r12, r24
 16a:	89 2e       	mov	r8, r25
				//sendWord(receivedKeyframe.distance);
				break;
 16c:	ea cf       	rjmp	.-44     	; 0x142 <readKeyframe+0x2e>
			case 1:
				//sendLetter('c');
				receivedKeyframe.horDeg = USARTgetWord();
 16e:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 172:	d8 2e       	mov	r13, r24
 174:	99 2e       	mov	r9, r25
				//sendWord(receivedKeyframe.horDeg);
				break;
 176:	e5 cf       	rjmp	.-54     	; 0x142 <readKeyframe+0x2e>
			case 2:
				//sendLetter('d');				
				receivedKeyframe.vertDeg = USARTgetWord();
 178:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 17c:	e8 2e       	mov	r14, r24
 17e:	a9 2e       	mov	r10, r25
				//sendWord(receivedKeyframe.vertDeg);
				break;
 180:	e0 cf       	rjmp	.-64     	; 0x142 <readKeyframe+0x2e>
			case 3:
				//sendLetter('e');				
				receivedKeyframe.timeStamp = USARTgetWord();				
 182:	0e 94 75 00 	call	0xea	; 0xea <USARTgetWord>
 186:	f8 2e       	mov	r15, r24
 188:	b9 2e       	mov	r11, r25
 18a:	03 c0       	rjmp	.+6      	; 0x192 <readKeyframe+0x7e>
	
}

struct keyFrame readKeyframe(uint8_t bytes){
	struct keyFrame receivedKeyframe;
	for(int i=0; i<4; i++){	
 18c:	04 30       	cpi	r16, 0x04	; 4
 18e:	11 05       	cpc	r17, r1
 190:	c4 f2       	brlt	.-80     	; 0x142 <readKeyframe+0x2e>
				//sendWord(receivedKeyframe.timeStamp);
				break;
		}
	}
	//sendLetter('f');	
	return receivedKeyframe;
 192:	c9 82       	std	Y+1, r12	; 0x01
 194:	8a 82       	std	Y+2, r8	; 0x02
 196:	db 82       	std	Y+3, r13	; 0x03
 198:	9c 82       	std	Y+4, r9	; 0x04
 19a:	ed 82       	std	Y+5, r14	; 0x05
 19c:	ae 82       	std	Y+6, r10	; 0x06
 19e:	ff 82       	std	Y+7, r15	; 0x07
 1a0:	b8 86       	std	Y+8, r11	; 0x08
 1a2:	2c 2d       	mov	r18, r12
 1a4:	38 2d       	mov	r19, r8
 1a6:	4d 2d       	mov	r20, r13
 1a8:	59 2d       	mov	r21, r9
 1aa:	6e 2d       	mov	r22, r14
 1ac:	7a 2d       	mov	r23, r10
}
 1ae:	8f 2d       	mov	r24, r15
 1b0:	9b 2d       	mov	r25, r11
 1b2:	28 96       	adiw	r28, 0x08	; 8
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	af 90       	pop	r10
 1d2:	9f 90       	pop	r9
 1d4:	8f 90       	pop	r8
 1d6:	08 95       	ret

000001d8 <init_Timer1>:
}

void init_Timer1(){	
	// setting CPU clock/1024
	// 1s = 15625 cycles
	TCCR1B = (1<<CS12 | 1<<CS10 | 1<<WGM12); // enable CTC
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	80 93 81 00 	sts	0x0081, r24
	// set CTC value
	OCR1A = OCR1A_value;	
 1de:	80 91 02 01 	lds	r24, 0x0102
 1e2:	90 91 03 01 	lds	r25, 0x0103
 1e6:	90 93 89 00 	sts	0x0089, r25
 1ea:	80 93 88 00 	sts	0x0088, r24
	// enable Timer Overflow Interrupt
	TIMSK1 |= (1<<OCIE1A);
 1ee:	ef e6       	ldi	r30, 0x6F	; 111
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 83       	st	Z, r24
	// Global Interrupt enable
	SREG |= (1<<7);	
 1f8:	8f b7       	in	r24, 0x3f	; 63
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8f bf       	out	0x3f, r24	; 63
 1fe:	08 95       	ret

00000200 <setCurrentLimiter_T4>:

// current limit set, TIMER4 PWM
// I_tripMax = V_ref/(8*R_s), R_s = 0.1 Ohm
// 200 mA = V_ref/0.8 -> V_ref = 0.16V = 3.2% uptime -> OCR4D = 8
void setCurrentLimiter_T4(int ocr_value){
	DDRD |= (1<<PD7);					//OCR4D to output
 200:	57 9a       	sbi	0x0a, 7	; 10
	OCR4D = ocr_value;					// set count limit
 202:	80 93 d2 00 	sts	0x00D2, r24
	TCCR4C |= (1<<COM4D1)|(1<<PWM4D);	// set fast PWM mode - clear on CM, enable PWM @ OCR4D
 206:	e2 ec       	ldi	r30, 0xC2	; 194
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	89 60       	ori	r24, 0x09	; 9
 20e:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);				// set CPU clock for timer clock
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
	TCNT4 = 0x000;						// init count
 21a:	10 92 bf 00 	sts	0x00BF, r1
 21e:	10 92 be 00 	sts	0x00BE, r1
 222:	08 95       	ret

00000224 <init_UART>:
}

void init_UART(){
	// UART
	// setting baud rate to 9600
	UBRR1 = 207;
 224:	8f ec       	ldi	r24, 0xCF	; 207
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 cd 00 	sts	0x00CD, r25
 22c:	80 93 cc 00 	sts	0x00CC, r24
	// setting up double speed mode
	UCSR1A = (1 << U2X1);	
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 c8 00 	sts	0x00C8, r24
	// set up 8 data bits
	UCSR1C |= (1<<UCSZ10) | (1<<UCSZ11);
 236:	ea ec       	ldi	r30, 0xCA	; 202
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	86 60       	ori	r24, 0x06	; 6
 23e:	80 83       	st	Z, r24
	// enable transmitter, receiever, receive complete interrupt
	UCSR1B |= (1<<TXEN1 | 1 << RXEN1 | 1 << RXCIE1);
 240:	e9 ec       	ldi	r30, 0xC9	; 201
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	88 69       	ori	r24, 0x98	; 152
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret

0000024c <sendLetter>:
	
}

void sendLetter(uint8_t letter){
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 24c:	e8 ec       	ldi	r30, 0xC8	; 200
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	95 ff       	sbrs	r25, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <sendLetter+0x4>
	// else load value to UART sending register
	UDR1 = letter;
 256:	80 93 ce 00 	sts	0x00CE, r24
 25a:	08 95       	ret

0000025c <sendWord>:
}

void sendWord(uint16_t word){
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 25c:	e8 ec       	ldi	r30, 0xC8	; 200
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	20 81       	ld	r18, Z
 262:	25 ff       	sbrs	r18, 5
 264:	fd cf       	rjmp	.-6      	; 0x260 <sendWord+0x4>
	// else load value to UART sending register
	UDR1 = (word>>8) & 0xFF;
 266:	90 93 ce 00 	sts	0x00CE, r25
	// while last value not yet cleared
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
 26a:	e8 ec       	ldi	r30, 0xC8	; 200
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	90 81       	ld	r25, Z
 270:	95 ff       	sbrs	r25, 5
 272:	fd cf       	rjmp	.-6      	; 0x26e <sendWord+0x12>
	// else load value to UART sending register
	UDR1 = word;
 274:	80 93 ce 00 	sts	0x00CE, r24
 278:	08 95       	ret

0000027a <rmCLKDIV8>:
	}
}

void rmCLKDIV8(){
	// Remove CLKDIV8
	CLKPR = 0x80;
 27a:	e1 e6       	ldi	r30, 0x61	; 97
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	80 83       	st	Z, r24
	CLKPR = 0x00;
 282:	10 82       	st	Z, r1
 284:	08 95       	ret

00000286 <init_steppers>:
}

void init_steppers(){
	// STEP2 (bottom stepper) is PB5
	DDRB |= (1 << PB5);
 286:	25 9a       	sbi	0x04, 5	; 4
	// DIR2
	DDRB |= (1 << PB4);
 288:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PB4);
 28a:	2c 9a       	sbi	0x05, 4	; 5
	// STEP3 (middle stepper) is PC6
	DDRC |= (1 << PC6);
 28c:	3e 9a       	sbi	0x07, 6	; 7
	// STEP1 (upper stepper) is PB6
	DDRB |= (1 << PB6);
 28e:	26 9a       	sbi	0x04, 6	; 4
	// Change upper stepper DIR
	DDRD |= (1 << PD1);
 290:	51 9a       	sbi	0x0a, 1	; 10
 292:	08 95       	ret

00000294 <main>:
struct keyFrame keyframes[10];


int main(void){

	rmCLKDIV8();
 294:	0e 94 3d 01 	call	0x27a	; 0x27a <rmCLKDIV8>
	SREG |= (1<<7);	
}

// get OSCR1A value for required frequency
int getOSCR1A(int freq){
	return (F_CPU/CKDIV_16/freq);	
 298:	20 91 00 01 	lds	r18, 0x0100
 29c:	30 91 01 01 	lds	r19, 0x0101
 2a0:	44 27       	eor	r20, r20
 2a2:	37 fd       	sbrc	r19, 7
 2a4:	40 95       	com	r20
 2a6:	54 2f       	mov	r21, r20
 2a8:	69 e0       	ldi	r22, 0x09	; 9
 2aa:	7d e3       	ldi	r23, 0x3D	; 61
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 04 02 	call	0x408	; 0x408 <__divmodsi4>
 2b4:	30 93 03 01 	sts	0x0103, r19
 2b8:	20 93 02 01 	sts	0x0102, r18
	////////////// Blinking LED freq /////////////////////
	// get compare match value for timer 1
	OCR1A_value = getOSCR1A(freq1);
	// debug LED to output
	int led = 0x20;
	DDRD |= led;
 2bc:	55 9a       	sbi	0x0a, 5	; 10
	
	////////////// Init Stepper CurrentLimit & DDRs //////
	cli();
 2be:	f8 94       	cli
	init_Timer1();
 2c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_Timer1>
	// !!!TEST WITH POWER SUPPLY!!!
	setCurrentLimiter_T4(8);	// 3,2% duty cycle
 2c4:	88 e0       	ldi	r24, 0x08	; 8
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 00 01 	call	0x200	; 0x200 <setCurrentLimiter_T4>
	init_steppers();			// PORT & DDR stuff for step and direction
 2cc:	0e 94 43 01 	call	0x286	; 0x286 <init_steppers>
	sei();
 2d0:	78 94       	sei
	
	////////////// UART testing //////////////////////////
	char str[] = "JOUJOU";
	init_UART();		// settings and RX TX enable stuff
 2d2:	0e 94 12 01 	call	0x224	; 0x224 <init_UART>
};

struct keyFrame keyframes[10];


int main(void){
 2d6:	68 94       	set
 2d8:	88 24       	eor	r8, r8
 2da:	86 f8       	bld	r8, 6
 2dc:	0f 2e       	mov	r0, r31
 2de:	f2 e4       	ldi	r31, 0x42	; 66
 2e0:	9f 2e       	mov	r9, r31
 2e2:	f0 2d       	mov	r31, r0
 2e4:	0f 2e       	mov	r0, r31
 2e6:	ff e0       	ldi	r31, 0x0F	; 15
 2e8:	af 2e       	mov	r10, r31
 2ea:	f0 2d       	mov	r31, r0
 2ec:	b1 2c       	mov	r11, r1
    {
		for(uint32_t k = 0; k<1000000; k++){
			asm("nop");
		}
		
		sendWord(keyframes[0].distance);	// send confirmation
 2ee:	0f 2e       	mov	r0, r31
 2f0:	f4 e0       	ldi	r31, 0x04	; 4
 2f2:	cf 2e       	mov	r12, r31
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	df 2e       	mov	r13, r31
 2f8:	f0 2d       	mov	r31, r0
		sendWord(keyframes[0].horDeg);	// send confirmation
 2fa:	0f 2e       	mov	r0, r31
 2fc:	f6 e0       	ldi	r31, 0x06	; 6
 2fe:	ef 2e       	mov	r14, r31
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	ff 2e       	mov	r15, r31
 304:	f0 2d       	mov	r31, r0
		sendWord(keyframes[0].vertDeg);	// send confirmation
 306:	08 e0       	ldi	r16, 0x08	; 8
 308:	11 e0       	ldi	r17, 0x01	; 1
		sendWord(keyframes[0].timeStamp);	// send confirmation
 30a:	ca e0       	ldi	r28, 0x0A	; 10
 30c:	d1 e0       	ldi	r29, 0x01	; 1
};

struct keyFrame keyframes[10];


int main(void){
 30e:	88 2d       	mov	r24, r8
 310:	99 2d       	mov	r25, r9
 312:	aa 2d       	mov	r26, r10
 314:	bb 2d       	mov	r27, r11
	
	///////////// Main loop //////////////////////////////
    while(1)
    {
		for(uint32_t k = 0; k<1000000; k++){
			asm("nop");
 316:	00 00       	nop
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	a1 09       	sbc	r26, r1
 31c:	b1 09       	sbc	r27, r1

	
	///////////// Main loop //////////////////////////////
    while(1)
    {
		for(uint32_t k = 0; k<1000000; k++){
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	c1 f7       	brne	.-16     	; 0x316 <main+0x82>
			asm("nop");
		}
		
		sendWord(keyframes[0].distance);	// send confirmation
 326:	f6 01       	movw	r30, r12
 328:	80 81       	ld	r24, Z
 32a:	91 81       	ldd	r25, Z+1	; 0x01
 32c:	0e 94 2e 01 	call	0x25c	; 0x25c <sendWord>
		sendWord(keyframes[0].horDeg);	// send confirmation
 330:	f7 01       	movw	r30, r14
 332:	80 81       	ld	r24, Z
 334:	91 81       	ldd	r25, Z+1	; 0x01
 336:	0e 94 2e 01 	call	0x25c	; 0x25c <sendWord>
		sendWord(keyframes[0].vertDeg);	// send confirmation
 33a:	f8 01       	movw	r30, r16
 33c:	80 81       	ld	r24, Z
 33e:	91 81       	ldd	r25, Z+1	; 0x01
 340:	0e 94 2e 01 	call	0x25c	; 0x25c <sendWord>
		sendWord(keyframes[0].timeStamp);	// send confirmation
 344:	88 81       	ld	r24, Y
 346:	99 81       	ldd	r25, Y+1	; 0x01
 348:	0e 94 2e 01 	call	0x25c	; 0x25c <sendWord>
		sendLetter('o');
 34c:	8f e6       	ldi	r24, 0x6F	; 111
 34e:	0e 94 26 01 	call	0x24c	; 0x24c <sendLetter>
		//}
		
		//sendWord(0xFFFF);
		
		//sendLetter(0xFF);
    }
 352:	dd cf       	rjmp	.-70     	; 0x30e <main+0x7a>

00000354 <__vector_17>:
	//PORTB |= (1 << PB0) | (1 << PB1);
	
	
}

SIGNAL(TIMER1_COMPA_vect){
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
	TCNT1 = 0x0000;
 362:	10 92 85 00 	sts	0x0085, r1
 366:	10 92 84 00 	sts	0x0084, r1
	//PD5 = DEBUG_LED
	PORTD = PORTD^(1<<PD5);	// invert LED value
 36a:	9b b1       	in	r25, 0x0b	; 11
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	89 27       	eor	r24, r25
 370:	8b b9       	out	0x0b, r24	; 11
	//asm("NOP");

	//TEST WITHH POWER SUPPLY
	//PB6 = STEP1
	//PORTD ^= (1 << PD1);
	PORTB = PORTB^(1<<PB6);
 372:	95 b1       	in	r25, 0x05	; 5
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	89 27       	eor	r24, r25
 378:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 37a:	00 00       	nop
	asm("NOP");
 37c:	00 00       	nop
	asm("NOP");
 37e:	00 00       	nop
	PORTB = PORTB^(1<<PB6);
 380:	95 b1       	in	r25, 0x05	; 5
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	89 27       	eor	r24, r25
 386:	85 b9       	out	0x05, r24	; 5
	asm("NOP");
 388:	00 00       	nop
	asm("NOP");
 38a:	00 00       	nop
	asm("NOP");
 38c:	00 00       	nop
}
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <__vector_25>:

SIGNAL(USART1_RX_vect){
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	
	//PORTD = PORTD^(1<<PD5);	// invert LED value
	
	uint8_t firstBit = UDR1;
 3be:	80 91 ce 00 	lds	r24, 0x00CE
	//freq1 = (a-0x30)*10;
	//OCR1A = getOSCR1A(freq1);
	//sendLetter(firstBit);
	//asm("nop");
	
	if(firstBit == 'k'){	//gonna be receiving a keyframe, aka four 16bit numbers
 3c2:	8b 36       	cpi	r24, 0x6B	; 107
 3c4:	81 f4       	brne	.+32     	; 0x3e6 <__vector_25+0x4a>
		//cli();
		//sendWord(1200);
		sendLetter('s');
 3c6:	83 e7       	ldi	r24, 0x73	; 115
 3c8:	0e 94 26 01 	call	0x24c	; 0x24c <sendLetter>
		keyframes[0] = readKeyframe(2);
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <readKeyframe>
 3d2:	e4 e0       	ldi	r30, 0x04	; 4
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	20 83       	st	Z, r18
 3d8:	31 83       	std	Z+1, r19	; 0x01
 3da:	42 83       	std	Z+2, r20	; 0x02
 3dc:	53 83       	std	Z+3, r21	; 0x03
 3de:	64 83       	std	Z+4, r22	; 0x04
 3e0:	75 83       	std	Z+5, r23	; 0x05
 3e2:	86 83       	std	Z+6, r24	; 0x06
 3e4:	97 83       	std	Z+7, r25	; 0x07
		
		//sendWord(USARTgetWord());
		//sendLetter('x');
		//sei();
	}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__divmodsi4>:
 408:	05 2e       	mov	r0, r21
 40a:	97 fb       	bst	r25, 7
 40c:	1e f4       	brtc	.+6      	; 0x414 <__divmodsi4+0xc>
 40e:	00 94       	com	r0
 410:	0e 94 1b 02 	call	0x436	; 0x436 <__negsi2>
 414:	57 fd       	sbrc	r21, 7
 416:	07 d0       	rcall	.+14     	; 0x426 <__divmodsi4_neg2>
 418:	0e 94 23 02 	call	0x446	; 0x446 <__udivmodsi4>
 41c:	07 fc       	sbrc	r0, 7
 41e:	03 d0       	rcall	.+6      	; 0x426 <__divmodsi4_neg2>
 420:	4e f4       	brtc	.+18     	; 0x434 <__divmodsi4_exit>
 422:	0c 94 1b 02 	jmp	0x436	; 0x436 <__negsi2>

00000426 <__divmodsi4_neg2>:
 426:	50 95       	com	r21
 428:	40 95       	com	r20
 42a:	30 95       	com	r19
 42c:	21 95       	neg	r18
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
 430:	4f 4f       	sbci	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255

00000434 <__divmodsi4_exit>:
 434:	08 95       	ret

00000436 <__negsi2>:
 436:	90 95       	com	r25
 438:	80 95       	com	r24
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__udivmodsi4>:
 446:	a1 e2       	ldi	r26, 0x21	; 33
 448:	1a 2e       	mov	r1, r26
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	fd 01       	movw	r30, r26
 450:	0d c0       	rjmp	.+26     	; 0x46c <__udivmodsi4_ep>

00000452 <__udivmodsi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	ee 1f       	adc	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	a2 17       	cp	r26, r18
 45c:	b3 07       	cpc	r27, r19
 45e:	e4 07       	cpc	r30, r20
 460:	f5 07       	cpc	r31, r21
 462:	20 f0       	brcs	.+8      	; 0x46c <__udivmodsi4_ep>
 464:	a2 1b       	sub	r26, r18
 466:	b3 0b       	sbc	r27, r19
 468:	e4 0b       	sbc	r30, r20
 46a:	f5 0b       	sbc	r31, r21

0000046c <__udivmodsi4_ep>:
 46c:	66 1f       	adc	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	1a 94       	dec	r1
 476:	69 f7       	brne	.-38     	; 0x452 <__udivmodsi4_loop>
 478:	60 95       	com	r22
 47a:	70 95       	com	r23
 47c:	80 95       	com	r24
 47e:	90 95       	com	r25
 480:	9b 01       	movw	r18, r22
 482:	ac 01       	movw	r20, r24
 484:	bd 01       	movw	r22, r26
 486:	cf 01       	movw	r24, r30
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
