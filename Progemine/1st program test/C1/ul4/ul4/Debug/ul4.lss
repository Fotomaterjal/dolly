
ul4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b9  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000127  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c7  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000052  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e1       	ldi	r29, 0x10	; 16
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ec       	ldi	r30, 0xCE	; 206
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  ce:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <delayMs>:
    }
}


void delayMs(uint16_t milliseconds){
	uint32_t cycles = ((uint32_t)milliseconds)*180;
  d6:	bc 01       	movw	r22, r24
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 eb       	ldi	r18, 0xB4	; 180
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__mulsi3>
  e8:	ab 01       	movw	r20, r22
  ea:	bc 01       	movw	r22, r24
	for(uint32_t i = 0; i < cycles; i++){
  ec:	41 15       	cp	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	61 05       	cpc	r22, r1
  f2:	71 05       	cpc	r23, r1
  f4:	61 f0       	breq	.+24     	; 0x10e <delayMs+0x38>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	dc 01       	movw	r26, r24
		asm("nop");
  fc:	00 00       	nop
}


void delayMs(uint16_t milliseconds){
	uint32_t cycles = ((uint32_t)milliseconds)*180;
	for(uint32_t i = 0; i < cycles; i++){
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	84 17       	cp	r24, r20
 106:	95 07       	cpc	r25, r21
 108:	a6 07       	cpc	r26, r22
 10a:	b7 07       	cpc	r27, r23
 10c:	b9 f7       	brne	.-18     	; 0xfc <delayMs+0x26>
 10e:	08 95       	ret

00000110 <longSignal>:
	PORTA = 0x00;
	delayMs(200);
}

void longSignal(){
	PORTA = 0x01;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	82 b9       	out	0x02, r24	; 2
	delayMs(600);
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
	PORTA = 0x00;
 11c:	12 b8       	out	0x02, r1	; 2
	delayMs(200);
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
 126:	08 95       	ret

00000128 <shortSignal>:
		asm("nop");
	}
}

void shortSignal(){
	PORTA = 0x01;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	82 b9       	out	0x02, r24	; 2
	delayMs(200);
 12c:	88 ec       	ldi	r24, 0xC8	; 200
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
	PORTA = 0x00;
 134:	12 b8       	out	0x02, r1	; 2
	delayMs(200);
 136:	88 ec       	ldi	r24, 0xC8	; 200
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
}
 13e:	08 95       	ret

00000140 <main>:

void delayMs();

int main(void)
{
	DDRA = 0x01;			//data direction
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x01;		//light one LED
 144:	82 b9       	out	0x02, r24	; 2
	
    while(1)
    {

        shortSignal();
 146:	c4 e9       	ldi	r28, 0x94	; 148
 148:	d0 e0       	ldi	r29, 0x00	; 0
		shortSignal();
		shortSignal();
		
		delayMs(400);
		
		longSignal();
 14a:	08 e8       	ldi	r16, 0x88	; 136
 14c:	10 e0       	ldi	r17, 0x00	; 0
	PORTA = 0x01;		//light one LED
	
    while(1)
    {

        shortSignal();
 14e:	fe 01       	movw	r30, r28
 150:	09 95       	icall
		shortSignal();
 152:	fe 01       	movw	r30, r28
 154:	09 95       	icall
		shortSignal();
 156:	fe 01       	movw	r30, r28
 158:	09 95       	icall
		
		delayMs(400);
 15a:	80 e9       	ldi	r24, 0x90	; 144
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
		
		longSignal();
 162:	f8 01       	movw	r30, r16
 164:	09 95       	icall
		longSignal();
 166:	f8 01       	movw	r30, r16
 168:	09 95       	icall
		longSignal();
 16a:	f8 01       	movw	r30, r16
 16c:	09 95       	icall

		delayMs(400);
 16e:	80 e9       	ldi	r24, 0x90	; 144
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
		
		shortSignal();
 176:	fe 01       	movw	r30, r28
 178:	09 95       	icall
		shortSignal();
 17a:	fe 01       	movw	r30, r28
 17c:	09 95       	icall
		shortSignal();
 17e:	fe 01       	movw	r30, r28
 180:	09 95       	icall
		
		delayMs(1200);
 182:	80 eb       	ldi	r24, 0xB0	; 176
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	0e 94 6b 00 	call	0xd6	; 0xd6 <delayMs>
 18a:	e1 cf       	rjmp	.-62     	; 0x14e <main+0xe>

0000018c <__mulsi3>:
 18c:	62 9f       	mul	r22, r18
 18e:	d0 01       	movw	r26, r0
 190:	73 9f       	mul	r23, r19
 192:	f0 01       	movw	r30, r0
 194:	82 9f       	mul	r24, r18
 196:	e0 0d       	add	r30, r0
 198:	f1 1d       	adc	r31, r1
 19a:	64 9f       	mul	r22, r20
 19c:	e0 0d       	add	r30, r0
 19e:	f1 1d       	adc	r31, r1
 1a0:	92 9f       	mul	r25, r18
 1a2:	f0 0d       	add	r31, r0
 1a4:	83 9f       	mul	r24, r19
 1a6:	f0 0d       	add	r31, r0
 1a8:	74 9f       	mul	r23, r20
 1aa:	f0 0d       	add	r31, r0
 1ac:	65 9f       	mul	r22, r21
 1ae:	f0 0d       	add	r31, r0
 1b0:	99 27       	eor	r25, r25
 1b2:	72 9f       	mul	r23, r18
 1b4:	b0 0d       	add	r27, r0
 1b6:	e1 1d       	adc	r30, r1
 1b8:	f9 1f       	adc	r31, r25
 1ba:	63 9f       	mul	r22, r19
 1bc:	b0 0d       	add	r27, r0
 1be:	e1 1d       	adc	r30, r1
 1c0:	f9 1f       	adc	r31, r25
 1c2:	bd 01       	movw	r22, r26
 1c4:	cf 01       	movw	r24, r30
 1c6:	11 24       	eor	r1, r1
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
